
naputin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800100  0000095e  000009f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000095e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080018a  0080018a  00000a7c  2**0
                  ALLOC
  3 .debug_aranges 000000b0  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000015e  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c6e  00000000  00000000  00000c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003d6  00000000  00000000  000018f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bc0  00000000  00000000  00001cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00002890  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003df  00000000  00000000  00002990  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000785  00000000  00000000  00002d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  000034f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return usb_keyboard_send();
}

// send the contents of keyboard_keys and keyboard_modifier_keys
int8_t usb_keyboard_send(void)
{
   0:	fa c0       	rjmp	.+500    	; 0x1f6 <__ctors_end>

void phex16(unsigned int i)
{
	phex(i >> 8);
	phex(i);
}
   2:	00 00       	nop
   4:	13 c1       	rjmp	.+550    	; 0x22c <__bad_interrupt>
   6:	00 00       	nop
   8:	11 c1       	rjmp	.+546    	; 0x22c <__bad_interrupt>
   a:	00 00       	nop
   c:	0f c1       	rjmp	.+542    	; 0x22c <__bad_interrupt>
   e:	00 00       	nop
  10:	0d c1       	rjmp	.+538    	; 0x22c <__bad_interrupt>
  12:	00 00       	nop
  14:	0b c1       	rjmp	.+534    	; 0x22c <__bad_interrupt>
  16:	00 00       	nop
  18:	09 c1       	rjmp	.+530    	; 0x22c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	07 c1       	rjmp	.+526    	; 0x22c <__bad_interrupt>
  1e:	00 00       	nop
  20:	05 c1       	rjmp	.+522    	; 0x22c <__bad_interrupt>
  22:	00 00       	nop
  24:	03 c1       	rjmp	.+518    	; 0x22c <__bad_interrupt>
  26:	00 00       	nop
  28:	4d c2       	rjmp	.+1178   	; 0x4c4 <__vector_10>
  2a:	00 00       	nop
  2c:	cd c2       	rjmp	.+1434   	; 0x5c8 <__vector_11>
  2e:	00 00       	nop
  30:	fd c0       	rjmp	.+506    	; 0x22c <__bad_interrupt>
  32:	00 00       	nop
  34:	fb c0       	rjmp	.+502    	; 0x22c <__bad_interrupt>
  36:	00 00       	nop
  38:	f9 c0       	rjmp	.+498    	; 0x22c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f7 c0       	rjmp	.+494    	; 0x22c <__bad_interrupt>
  3e:	00 00       	nop
  40:	f5 c0       	rjmp	.+490    	; 0x22c <__bad_interrupt>
  42:	00 00       	nop
  44:	f3 c0       	rjmp	.+486    	; 0x22c <__bad_interrupt>
  46:	00 00       	nop
  48:	f1 c0       	rjmp	.+482    	; 0x22c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ef c0       	rjmp	.+478    	; 0x22c <__bad_interrupt>
  4e:	00 00       	nop
  50:	ed c0       	rjmp	.+474    	; 0x22c <__bad_interrupt>
  52:	00 00       	nop
  54:	eb c0       	rjmp	.+470    	; 0x22c <__bad_interrupt>
  56:	00 00       	nop
  58:	e9 c0       	rjmp	.+466    	; 0x22c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e7 c0       	rjmp	.+462    	; 0x22c <__bad_interrupt>
  5e:	00 00       	nop
  60:	e5 c0       	rjmp	.+458    	; 0x22c <__bad_interrupt>
  62:	00 00       	nop
  64:	e3 c0       	rjmp	.+454    	; 0x22c <__bad_interrupt>
  66:	00 00       	nop
  68:	e1 c0       	rjmp	.+450    	; 0x22c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	df c0       	rjmp	.+446    	; 0x22c <__bad_interrupt>
  6e:	00 00       	nop
  70:	dd c0       	rjmp	.+442    	; 0x22c <__bad_interrupt>
  72:	00 00       	nop
  74:	db c0       	rjmp	.+438    	; 0x22c <__bad_interrupt>
  76:	00 00       	nop
  78:	d9 c0       	rjmp	.+434    	; 0x22c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d7 c0       	rjmp	.+430    	; 0x22c <__bad_interrupt>
  7e:	00 00       	nop
  80:	d5 c0       	rjmp	.+426    	; 0x22c <__bad_interrupt>
  82:	00 00       	nop
  84:	d3 c0       	rjmp	.+422    	; 0x22c <__bad_interrupt>
  86:	00 00       	nop
  88:	d1 c0       	rjmp	.+418    	; 0x22c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	cf c0       	rjmp	.+414    	; 0x22c <__bad_interrupt>
  8e:	00 00       	nop
  90:	cd c0       	rjmp	.+410    	; 0x22c <__bad_interrupt>
  92:	00 00       	nop
  94:	cb c0       	rjmp	.+406    	; 0x22c <__bad_interrupt>
  96:	00 00       	nop
  98:	c9 c0       	rjmp	.+402    	; 0x22c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c7 c0       	rjmp	.+398    	; 0x22c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c5 c0       	rjmp	.+394    	; 0x22c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c3 c0       	rjmp	.+390    	; 0x22c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c1 c0       	rjmp	.+386    	; 0x22c <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__c.1416>:
  ac:	0a 00                                               ..

000000ae <__c.1411>:
  ae:	30 2c 20 00                                         0, .

000000b2 <__c.1409>:
  b2:	31 2c 20 00                                         1, .

000000b6 <__c.1407>:
  b6:	0a 73 74 61 74 65 3a 0a 00                          .state:..

000000bf <__c.1396>:
  bf:	0a 6d 61 69 6e 20 6c 6f 6f 70 20 73 74 61 72 74     .main loop start
  cf:	65 64 0a 00                                         ed..

000000d3 <__c.1392>:
  d3:	75 73 62 20 63 6f 6e 66 69 67 75 72 65 64 0a 00     usb configured..

000000e3 <descriptor_list>:
  e3:	00 01 00 00 2a 01 12 00 02 00 00 3c 01 3b 00 22     ....*......<.;."
  f3:	00 00 77 01 3f 00 21 00 00 4e 01 09 00 22 01 00     ..w.?.!..N..."..
 103:	b6 01 15 00 21 01 00 67 01 09 00 03 00 00 cb 01     ....!..g........
 113:	04 01 03 09 04 cf 01 10 02 03 09 04 e1 01 12        ...............

00000122 <endpoint_config_table>:
 122:	00 00 01 c1 06 01 c1 26                             .......&

0000012a <device_descriptor>:
 12a:	12 01 00 02 00 00 00 20 c0 16 7d 04 00 01 01 02     ....... ..}.....
 13a:	00 01                                               ..

0000013c <config1_descriptor>:
 13c:	09 02 3b 00 02 01 00 c0 32 09 04 00 00 01 03 01     ..;.....2.......
 14c:	01 00 09 21 11 01 00 01 22 3f 00 07 05 83 03 08     ...!...."?......
 15c:	00 01 09 04 01 00 01 03 00 00 00 09 21 11 01 00     ............!...
 16c:	01 22 15 00 07 05 84 03 20 00 01                    ."...... ..

00000177 <keyboard_hid_report_desc>:
 177:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
 187:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
 197:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
 1a7:	75 08 15 00 25 68 05 07 19 00 29 68 81 00 c0        u...%h....)h...

000001b6 <debug_hid_report_desc>:
 1b6:	06 31 ff 09 74 a1 53 75 08 15 00 26 ff 00 95 20     .1..t.Su...&... 
 1c6:	09 75 81 02 c0                                      .u...

000001cb <string0>:
 1cb:	04 03 09 04                                         ....

000001cf <string1>:
 1cf:	10 03 4d 00 66 00 67 00 4e 00 61 00 6d 00 65 00     ..M.f.g.N.a.m.e.
 1df:	00 00                                               ..

000001e1 <string2>:
 1e1:	12 03 4b 00 65 00 79 00 62 00 6f 00 61 00 72 00     ..K.e.y.b.o.a.r.
 1f1:	64 00 00 00 00                                      d....

000001f6 <__ctors_end>:
 1f6:	11 24       	eor	r1, r1
 1f8:	1f be       	out	0x3f, r1	; 63
 1fa:	cf ef       	ldi	r28, 0xFF	; 255
 1fc:	da e0       	ldi	r29, 0x0A	; 10
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	cd bf       	out	0x3d, r28	; 61

00000202 <__do_copy_data>:
 202:	11 e0       	ldi	r17, 0x01	; 1
 204:	a0 e0       	ldi	r26, 0x00	; 0
 206:	b1 e0       	ldi	r27, 0x01	; 1
 208:	ee e5       	ldi	r30, 0x5E	; 94
 20a:	f9 e0       	ldi	r31, 0x09	; 9
 20c:	02 c0       	rjmp	.+4      	; 0x212 <.do_copy_data_start>

0000020e <.do_copy_data_loop>:
 20e:	05 90       	lpm	r0, Z+
 210:	0d 92       	st	X+, r0

00000212 <.do_copy_data_start>:
 212:	aa 38       	cpi	r26, 0x8A	; 138
 214:	b1 07       	cpc	r27, r17
 216:	d9 f7       	brne	.-10     	; 0x20e <.do_copy_data_loop>

00000218 <__do_clear_bss>:
 218:	11 e0       	ldi	r17, 0x01	; 1
 21a:	aa e8       	ldi	r26, 0x8A	; 138
 21c:	b1 e0       	ldi	r27, 0x01	; 1
 21e:	01 c0       	rjmp	.+2      	; 0x222 <.do_clear_bss_start>

00000220 <.do_clear_bss_loop>:
 220:	1d 92       	st	X+, r1

00000222 <.do_clear_bss_start>:
 222:	a7 39       	cpi	r26, 0x97	; 151
 224:	b1 07       	cpc	r27, r17
 226:	e1 f7       	brne	.-8      	; 0x220 <.do_clear_bss_loop>
 228:	02 d0       	rcall	.+4      	; 0x22e <main>
 22a:	97 c3       	rjmp	.+1838   	; 0x95a <_exit>

0000022c <__bad_interrupt>:
 22c:	e9 ce       	rjmp	.-558    	; 0x0 <__vectors>

0000022e <main>:
#define CPU_PRESCALE(n) (CLKPR = 0x80, CLKPR = (n))

uint16_t idle_count = 0;

int main(void)
{
 22e:	2f 92       	push	r2
 230:	3f 92       	push	r3
 232:	4f 92       	push	r4
 234:	5f 92       	push	r5
 236:	6f 92       	push	r6
 238:	7f 92       	push	r7
 23a:	9f 92       	push	r9
 23c:	af 92       	push	r10
 23e:	bf 92       	push	r11
 240:	cf 92       	push	r12
 242:	df 92       	push	r13
 244:	ef 92       	push	r14
 246:	ff 92       	push	r15
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	df 93       	push	r29
 24e:	cf 93       	push	r28
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
 254:	ca 55       	subi	r28, 0x5A	; 90
 256:	d0 40       	sbci	r29, 0x00	; 0
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	f8 94       	cli
 25c:	de bf       	out	0x3e, r29	; 62
 25e:	0f be       	out	0x3f, r0	; 63
 260:	cd bf       	out	0x3d, r28	; 61
        7,  // C
        6,  // C
        3,  // D
        2}; // D

    CPU_PRESCALE(0);
 262:	80 e8       	ldi	r24, 0x80	; 128
 264:	80 93 61 00 	sts	0x0061, r24
 268:	10 92 61 00 	sts	0x0061, r1

    // configure ports 0 = input, 1 = output
    // columns: F0 F1 F4 F5 F6 F7 B6 B5 B4 D7 D6 C7 C6 D3 D2
    // rows: D1 D0 B7 B3 B2 B1
    DDRB = 0xCC; // 0, 1 inputs, 2, 3, 6, 7 outputs
 26c:	9c ec       	ldi	r25, 0xCC	; 204
 26e:	94 b9       	out	0x04, r25	; 4
    DDRC = 0xC0; // 6, 7 outputs
 270:	80 ec       	ldi	r24, 0xC0	; 192
 272:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xCC; // 0, 1, inputs 2, 3, 4, 5 outputs
 274:	9a b9       	out	0x0a, r25	; 10

    usb_init();
 276:	c6 d0       	rcall	.+396    	; 0x404 <usb_init>
    while (!usb_configured()) /* wait */
 278:	dc d0       	rcall	.+440    	; 0x432 <usb_configured>
 27a:	88 23       	and	r24, r24
 27c:	e9 f3       	breq	.-6      	; 0x278 <main+0x4a>
        ;
    print("usb configured\n");
 27e:	83 ed       	ldi	r24, 0xD3	; 211
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	57 d3       	rcall	.+1710   	; 0x932 <print_P>
 284:	80 e1       	ldi	r24, 0x10	; 16
 286:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 288:	20 e9       	ldi	r18, 0x90	; 144
 28a:	31 e0       	ldi	r19, 0x01	; 1
 28c:	f9 01       	movw	r30, r18
 28e:	31 97       	sbiw	r30, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <main+0x60>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 292:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 294:	d9 f7       	brne	.-10     	; 0x28c <main+0x5e>
uint16_t idle_count = 0;

int main(void)
{
    uint8_t reset_idle;
    bool state[6][15] = {0};
 296:	fe 01       	movw	r30, r28
 298:	31 96       	adiw	r30, 0x01	; 1
 29a:	8a e5       	ldi	r24, 0x5A	; 90
 29c:	df 01       	movw	r26, r30
 29e:	1d 92       	st	X+, r1
 2a0:	8a 95       	dec	r24
 2a2:	e9 f7       	brne	.-6      	; 0x29e <main+0x70>
        // reset states
        for (i = 0; i < 6; i++)
        {
            for (b = 0; i < 15; i++)
            {
                state[i][b] = false;
 2a4:	5f 01       	movw	r10, r30
        }

        // read all ports
        for (b = 0; b < 15; b++)
        {
            *(columns[b]) = *(columns[b]) | (0x01 << columnShift[b]);
 2a6:	71 e0       	ldi	r23, 0x01	; 1
 2a8:	27 2e       	mov	r2, r23
 2aa:	31 2c       	mov	r3, r1
            if ((PIND >> 1) & 0x01)
            {
                state[0][b] = true;
 2ac:	99 24       	eor	r9, r9
 2ae:	93 94       	inc	r9
            }
            *(columns[b]) = *(columns[b]) & ~(0x01 << columnShift[b]);
        }
        // add sum logic for changes

        print("\nstate:\n");
 2b0:	60 e1       	ldi	r22, 0x10	; 16
 2b2:	46 2e       	mov	r4, r22
 2b4:	51 2c       	mov	r5, r1
 2b6:	4c 0e       	add	r4, r28
 2b8:	5d 1e       	adc	r5, r29
 2ba:	50 e9       	ldi	r21, 0x90	; 144
 2bc:	65 2e       	mov	r6, r21
 2be:	51 e0       	ldi	r21, 0x01	; 1
 2c0:	75 2e       	mov	r7, r21
    _delay_ms(1000);

    uint8_t i, b;
    while (1)
    {
        print("\nmain loop started\n");
 2c2:	8f eb       	ldi	r24, 0xBF	; 191
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	35 d3       	rcall	.+1642   	; 0x932 <print_P>
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0d c0       	rjmp	.+26     	; 0x2e6 <main+0xb8>
        // reset states
        for (i = 0; i < 6; i++)
        {
            for (b = 0; i < 15; i++)
            {
                state[i][b] = false;
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	fc 01       	movw	r30, r24
 2d0:	44 e0       	ldi	r20, 0x04	; 4
 2d2:	ee 0f       	add	r30, r30
 2d4:	ff 1f       	adc	r31, r31
 2d6:	4a 95       	dec	r20
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <main+0xa4>
 2da:	e8 1b       	sub	r30, r24
 2dc:	f9 0b       	sbc	r31, r25
 2de:	ea 0d       	add	r30, r10
 2e0:	fb 1d       	adc	r31, r11
 2e2:	10 82       	st	Z, r1
    {
        print("\nmain loop started\n");
        // reset states
        for (i = 0; i < 6; i++)
        {
            for (b = 0; i < 15; i++)
 2e4:	82 2f       	mov	r24, r18
 2e6:	28 2f       	mov	r18, r24
 2e8:	2f 5f       	subi	r18, 0xFF	; 255
 2ea:	8f 30       	cpi	r24, 0x0F	; 15
 2ec:	78 f3       	brcs	.-34     	; 0x2cc <main+0x9e>
    uint8_t i, b;
    while (1)
    {
        print("\nmain loop started\n");
        // reset states
        for (i = 0; i < 6; i++)
 2ee:	82 2f       	mov	r24, r18
 2f0:	26 30       	cpi	r18, 0x06	; 6
 2f2:	c8 f3       	brcs	.-14     	; 0x2e6 <main+0xb8>
 2f4:	85 01       	movw	r16, r10
 2f6:	be 01       	movw	r22, r28
 2f8:	62 5d       	subi	r22, 0xD2	; 210
 2fa:	7f 4f       	sbci	r23, 0xFF	; 255
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	50 e0       	ldi	r21, 0x00	; 0
        }

        // read all ports
        for (b = 0; b < 15; b++)
        {
            *(columns[b]) = *(columns[b]) | (0x01 << columnShift[b]);
 300:	fa 01       	movw	r30, r20
 302:	ee 0f       	add	r30, r30
 304:	ff 1f       	adc	r31, r31
 306:	e7 59       	subi	r30, 0x97	; 151
 308:	fe 4f       	sbci	r31, 0xFE	; 254
 30a:	20 81       	ld	r18, Z
 30c:	31 81       	ldd	r19, Z+1	; 0x01
 30e:	a0 81       	ld	r26, Z
 310:	b1 81       	ldd	r27, Z+1	; 0x01
 312:	fa 01       	movw	r30, r20
 314:	e6 5a       	subi	r30, 0xA6	; 166
 316:	fe 4f       	sbci	r31, 0xFE	; 254
 318:	c1 01       	movw	r24, r2
 31a:	00 80       	ld	r0, Z
 31c:	02 c0       	rjmp	.+4      	; 0x322 <main+0xf4>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	0a 94       	dec	r0
 324:	e2 f7       	brpl	.-8      	; 0x31e <main+0xf0>
 326:	98 2f       	mov	r25, r24
 328:	8c 91       	ld	r24, X
 32a:	89 2b       	or	r24, r25
 32c:	f9 01       	movw	r30, r18
 32e:	80 83       	st	Z, r24
            if ((PIND >> 1) & 0x01)
 330:	49 9b       	sbis	0x09, 1	; 9
 332:	02 c0       	rjmp	.+4      	; 0x338 <main+0x10a>
            {
                state[0][b] = true;
 334:	d8 01       	movw	r26, r16
 336:	9c 92       	st	X, r9
            }
            if (PIND & 0x01)
 338:	48 9b       	sbis	0x09, 0	; 9
 33a:	02 c0       	rjmp	.+4      	; 0x340 <main+0x112>
            {
                state[1][b] = true;
 33c:	f8 01       	movw	r30, r16
 33e:	97 86       	std	Z+15, r9	; 0x0f
            }
            if ((PINB >> 7) & 0x01)
 340:	1f 9b       	sbis	0x03, 7	; 3
 342:	03 c0       	rjmp	.+6      	; 0x34a <main+0x11c>
            {
                state[2][b] = true;
 344:	d8 01       	movw	r26, r16
 346:	5e 96       	adiw	r26, 0x1e	; 30
 348:	9c 92       	st	X, r9
            }
            if ((PINB >> 3) & 0x01)
 34a:	1b 9b       	sbis	0x03, 3	; 3
 34c:	02 c0       	rjmp	.+4      	; 0x352 <main+0x124>
            {
                state[3][b] = true;
 34e:	fb 01       	movw	r30, r22
 350:	90 82       	st	Z, r9
            }
            if ((PINB >> 2) & 0x01)
 352:	1a 9b       	sbis	0x03, 2	; 3
 354:	03 c0       	rjmp	.+6      	; 0x35c <main+0x12e>
            {
                state[4][b] = true;
 356:	db 01       	movw	r26, r22
 358:	1f 96       	adiw	r26, 0x0f	; 15
 35a:	9c 92       	st	X, r9
            }
            if ((PINB >> 1) & 0x01)
 35c:	19 9b       	sbis	0x03, 1	; 3
 35e:	02 c0       	rjmp	.+4      	; 0x364 <main+0x136>
            {
                state[5][b] = true;
 360:	fb 01       	movw	r30, r22
 362:	96 8e       	std	Z+30, r9	; 0x1e
            }
            *(columns[b]) = *(columns[b]) & ~(0x01 << columnShift[b]);
 364:	fa 01       	movw	r30, r20
 366:	ee 0f       	add	r30, r30
 368:	ff 1f       	adc	r31, r31
 36a:	e7 59       	subi	r30, 0x97	; 151
 36c:	fe 4f       	sbci	r31, 0xFE	; 254
 36e:	a0 81       	ld	r26, Z
 370:	b1 81       	ldd	r27, Z+1	; 0x01
 372:	01 90       	ld	r0, Z+
 374:	f0 81       	ld	r31, Z
 376:	e0 2d       	mov	r30, r0
 378:	90 95       	com	r25
 37a:	80 81       	ld	r24, Z
 37c:	89 23       	and	r24, r25
 37e:	8c 93       	st	X, r24
 380:	4f 5f       	subi	r20, 0xFF	; 255
 382:	5f 4f       	sbci	r21, 0xFF	; 255
 384:	0f 5f       	subi	r16, 0xFF	; 255
 386:	1f 4f       	sbci	r17, 0xFF	; 255
 388:	6f 5f       	subi	r22, 0xFF	; 255
 38a:	7f 4f       	sbci	r23, 0xFF	; 255
                state[i][b] = false;
            }
        }

        // read all ports
        for (b = 0; b < 15; b++)
 38c:	4f 30       	cpi	r20, 0x0F	; 15
 38e:	51 05       	cpc	r21, r1
 390:	09 f0       	breq	.+2      	; 0x394 <main+0x166>
 392:	b6 cf       	rjmp	.-148    	; 0x300 <main+0xd2>
            }
            *(columns[b]) = *(columns[b]) & ~(0x01 << columnShift[b]);
        }
        // add sum logic for changes

        print("\nstate:\n");
 394:	86 eb       	ldi	r24, 0xB6	; 182
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	cc d2       	rcall	.+1432   	; 0x932 <print_P>
 39a:	62 01       	movw	r12, r4
 39c:	ee 24       	eor	r14, r14
 39e:	ff 24       	eor	r15, r15
 3a0:	1e c0       	rjmp	.+60     	; 0x3de <main+0x1b0>
        for (i = 0; i < 6; i++)
        {

            for (b = 0; b < 15; b++)
            {
                if (state[i][b])
 3a2:	d8 01       	movw	r26, r16
 3a4:	8c 91       	ld	r24, X
 3a6:	88 23       	and	r24, r24
 3a8:	19 f0       	breq	.+6      	; 0x3b0 <main+0x182>
                {
                    print("1, ");
 3aa:	82 eb       	ldi	r24, 0xB2	; 178
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <main+0x186>
                }
                else
                {
                    print("0, ");
 3b0:	8e ea       	ldi	r24, 0xAE	; 174
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	be d2       	rcall	.+1404   	; 0x932 <print_P>
 3b6:	0f 5f       	subi	r16, 0xFF	; 255
 3b8:	1f 4f       	sbci	r17, 0xFF	; 255

        print("\nstate:\n");
        for (i = 0; i < 6; i++)
        {

            for (b = 0; b < 15; b++)
 3ba:	0c 15       	cp	r16, r12
 3bc:	1d 05       	cpc	r17, r13
 3be:	89 f7       	brne	.-30     	; 0x3a2 <main+0x174>
                else
                {
                    print("0, ");
                }
            }
            print("\n");
 3c0:	8c ea       	ldi	r24, 0xAC	; 172
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	b6 d2       	rcall	.+1388   	; 0x932 <print_P>
 3c6:	08 94       	sec
 3c8:	e1 1c       	adc	r14, r1
 3ca:	f1 1c       	adc	r15, r1
 3cc:	9f e0       	ldi	r25, 0x0F	; 15
 3ce:	c9 2e       	mov	r12, r25
 3d0:	d1 2c       	mov	r13, r1
 3d2:	c0 0e       	add	r12, r16
 3d4:	d1 1e       	adc	r13, r17
            *(columns[b]) = *(columns[b]) & ~(0x01 << columnShift[b]);
        }
        // add sum logic for changes

        print("\nstate:\n");
        for (i = 0; i < 6; i++)
 3d6:	b6 e0       	ldi	r27, 0x06	; 6
 3d8:	eb 16       	cp	r14, r27
 3da:	f1 04       	cpc	r15, r1
 3dc:	59 f0       	breq	.+22     	; 0x3f4 <main+0x1c6>
 3de:	87 01       	movw	r16, r14
 3e0:	84 e0       	ldi	r24, 0x04	; 4
 3e2:	00 0f       	add	r16, r16
 3e4:	11 1f       	adc	r17, r17
 3e6:	8a 95       	dec	r24
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <main+0x1b4>
 3ea:	0e 19       	sub	r16, r14
 3ec:	1f 09       	sbc	r17, r15
 3ee:	0a 0d       	add	r16, r10
 3f0:	1b 1d       	adc	r17, r11
 3f2:	d7 cf       	rjmp	.-82     	; 0x3a2 <main+0x174>
 3f4:	80 e1       	ldi	r24, 0x10	; 16
 3f6:	97 e2       	ldi	r25, 0x27	; 39
 3f8:	f3 01       	movw	r30, r6
 3fa:	31 97       	sbiw	r30, 0x01	; 1
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <main+0x1cc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 400:	d9 f7       	brne	.-10     	; 0x3f8 <main+0x1ca>
 402:	5f cf       	rjmp	.-322    	; 0x2c2 <main+0x94>

00000404 <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	80 93 d7 00 	sts	0x00D7, r24
	USB_FREEZE();				// enable USB
 40a:	80 ea       	ldi	r24, 0xA0	; 160
 40c:	80 93 d8 00 	sts	0x00D8, r24
	PLL_CONFIG();				// config PLL
 410:	82 e1       	ldi	r24, 0x12	; 18
 412:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 414:	09 b4       	in	r0, 0x29	; 41
 416:	00 fe       	sbrs	r0, 0
 418:	fd cf       	rjmp	.-6      	; 0x414 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 41a:	80 e9       	ldi	r24, 0x90	; 144
 41c:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 420:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 424:	10 92 92 01 	sts	0x0192, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 428:	8c e0       	ldi	r24, 0x0C	; 12
 42a:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 42e:	78 94       	sei
}
 430:	08 95       	ret

00000432 <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
 432:	80 91 92 01 	lds	r24, 0x0192
}
 436:	08 95       	ret

00000438 <usb_debug_putchar>:
	return 0;
}

// transmit a character.  0 returned on success, -1 on error
int8_t usb_debug_putchar(uint8_t c)
{
 438:	48 2f       	mov	r20, r24
	static uint8_t previous_timeout=0;
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 43a:	80 91 92 01 	lds	r24, 0x0192
 43e:	88 23       	and	r24, r24
 440:	09 f4       	brne	.+2      	; 0x444 <usb_debug_putchar+0xc>
 442:	3e c0       	rjmp	.+124    	; 0x4c0 <usb_debug_putchar+0x88>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 444:	2f b7       	in	r18, 0x3f	; 63
	cli();
 446:	f8 94       	cli
	UENUM = DEBUG_TX_ENDPOINT;
 448:	84 e0       	ldi	r24, 0x04	; 4
 44a:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (previous_timeout) {
 44e:	80 91 96 01 	lds	r24, 0x0196
 452:	88 23       	and	r24, r24
 454:	41 f0       	breq	.+16     	; 0x466 <usb_debug_putchar+0x2e>
		if (!(UEINTX & (1<<RWAL))) {
 456:	80 91 e8 00 	lds	r24, 0x00E8
 45a:	85 fd       	sbrc	r24, 5
 45c:	02 c0       	rjmp	.+4      	; 0x462 <usb_debug_putchar+0x2a>
			SREG = intr_state;
 45e:	2f bf       	out	0x3f, r18	; 63
 460:	12 c0       	rjmp	.+36     	; 0x486 <usb_debug_putchar+0x4e>
			return -1;
		}
		previous_timeout = 0;
 462:	10 92 96 01 	sts	0x0196, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
 466:	90 91 e4 00 	lds	r25, 0x00E4
 46a:	9c 5f       	subi	r25, 0xFC	; 252
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = DEBUG_TX_ENDPOINT;
 46c:	34 e0       	ldi	r19, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 46e:	80 91 e8 00 	lds	r24, 0x00E8
 472:	85 fd       	sbrc	r24, 5
 474:	13 c0       	rjmp	.+38     	; 0x49c <usb_debug_putchar+0x64>
		SREG = intr_state;
 476:	2f bf       	out	0x3f, r18	; 63
		// have we waited too long?
		if (UDFNUML == timeout) {
 478:	80 91 e4 00 	lds	r24, 0x00E4
 47c:	89 17       	cp	r24, r25
 47e:	29 f4       	brne	.+10     	; 0x48a <usb_debug_putchar+0x52>
			previous_timeout = 1;
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	80 93 96 01 	sts	0x0196, r24
 486:	8f ef       	ldi	r24, 0xFF	; 255
 488:	08 95       	ret
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 48a:	80 91 92 01 	lds	r24, 0x0192
 48e:	88 23       	and	r24, r24
 490:	b9 f0       	breq	.+46     	; 0x4c0 <usb_debug_putchar+0x88>
		// get ready to try checking again
		intr_state = SREG;
 492:	2f b7       	in	r18, 0x3f	; 63
		cli();
 494:	f8 94       	cli
		UENUM = DEBUG_TX_ENDPOINT;
 496:	30 93 e9 00 	sts	0x00E9, r19
 49a:	e9 cf       	rjmp	.-46     	; 0x46e <usb_debug_putchar+0x36>
	}
	// actually write the byte into the FIFO
	UEDATX = c;
 49c:	40 93 f1 00 	sts	0x00F1, r20
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) {
 4a0:	80 91 e8 00 	lds	r24, 0x00E8
 4a4:	85 fd       	sbrc	r24, 5
 4a6:	06 c0       	rjmp	.+12     	; 0x4b4 <usb_debug_putchar+0x7c>
		UEINTX = 0x3A;
 4a8:	8a e3       	ldi	r24, 0x3A	; 58
 4aa:	80 93 e8 00 	sts	0x00E8, r24
		debug_flush_timer = 0;
 4ae:	10 92 94 01 	sts	0x0194, r1
 4b2:	03 c0       	rjmp	.+6      	; 0x4ba <usb_debug_putchar+0x82>
	} else {
		debug_flush_timer = 2;
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	80 93 94 01 	sts	0x0194, r24
	}
	SREG = intr_state;
 4ba:	2f bf       	out	0x3f, r18	; 63
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	08 95       	ret
	return 0;
 4c0:	8f ef       	ldi	r24, 0xFF	; 255
}
 4c2:	08 95       	ret

000004c4 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 4c4:	1f 92       	push	r1
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	0f 92       	push	r0
 4cc:	11 24       	eor	r1, r1
 4ce:	2f 93       	push	r18
 4d0:	8f 93       	push	r24
 4d2:	9f 93       	push	r25
	uint8_t intbits, t, i;
	static uint8_t div4=0;

        intbits = UDINT;
 4d4:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 4d8:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 4dc:	98 2f       	mov	r25, r24
 4de:	83 ff       	sbrs	r24, 3
 4e0:	0f c0       	rjmp	.+30     	; 0x500 <__vector_10+0x3c>
		UENUM = 0;
 4e2:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
 4ec:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 4f0:	82 e2       	ldi	r24, 0x22	; 34
 4f2:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
 4f6:	88 e0       	ldi	r24, 0x08	; 8
 4f8:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
 4fc:	10 92 92 01 	sts	0x0192, r1
        }
	if ((intbits & (1<<SOFI)) && usb_configuration) {
 500:	92 ff       	sbrs	r25, 2
 502:	5a c0       	rjmp	.+180    	; 0x5b8 <__vector_10+0xf4>
 504:	80 91 92 01 	lds	r24, 0x0192
 508:	88 23       	and	r24, r24
 50a:	09 f4       	brne	.+2      	; 0x50e <__vector_10+0x4a>
 50c:	55 c0       	rjmp	.+170    	; 0x5b8 <__vector_10+0xf4>
		t = debug_flush_timer;
 50e:	80 91 94 01 	lds	r24, 0x0194
		if (t) {
 512:	88 23       	and	r24, r24
 514:	91 f0       	breq	.+36     	; 0x53a <__vector_10+0x76>
			debug_flush_timer = -- t;
 516:	81 50       	subi	r24, 0x01	; 1
 518:	80 93 94 01 	sts	0x0194, r24
			if (!t) {
 51c:	88 23       	and	r24, r24
 51e:	69 f4       	brne	.+26     	; 0x53a <__vector_10+0x76>
				UENUM = DEBUG_TX_ENDPOINT;
 520:	84 e0       	ldi	r24, 0x04	; 4
 522:	80 93 e9 00 	sts	0x00E9, r24
 526:	02 c0       	rjmp	.+4      	; 0x52c <__vector_10+0x68>
				while ((UEINTX & (1<<RWAL))) {
					UEDATX = 0;
 528:	10 92 f1 00 	sts	0x00F1, r1
		t = debug_flush_timer;
		if (t) {
			debug_flush_timer = -- t;
			if (!t) {
				UENUM = DEBUG_TX_ENDPOINT;
				while ((UEINTX & (1<<RWAL))) {
 52c:	80 91 e8 00 	lds	r24, 0x00E8
 530:	85 fd       	sbrc	r24, 5
 532:	fa cf       	rjmp	.-12     	; 0x528 <__vector_10+0x64>
					UEDATX = 0;
				}
				UEINTX = 0x3A;
 534:	8a e3       	ldi	r24, 0x3A	; 58
 536:	80 93 e8 00 	sts	0x00E8, r24
			}
		}
		if (keyboard_idle_config && (++div4 & 3) == 0) {
 53a:	20 91 87 01 	lds	r18, 0x0187
 53e:	22 23       	and	r18, r18
 540:	d9 f1       	breq	.+118    	; 0x5b8 <__vector_10+0xf4>
 542:	80 91 95 01 	lds	r24, 0x0195
 546:	8f 5f       	subi	r24, 0xFF	; 255
 548:	80 93 95 01 	sts	0x0195, r24
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	83 70       	andi	r24, 0x03	; 3
 550:	90 70       	andi	r25, 0x00	; 0
 552:	89 2b       	or	r24, r25
 554:	89 f5       	brne	.+98     	; 0x5b8 <__vector_10+0xf4>
			UENUM = KEYBOARD_ENDPOINT;
 556:	83 e0       	ldi	r24, 0x03	; 3
 558:	80 93 e9 00 	sts	0x00E9, r24
			if (UEINTX & (1<<RWAL)) {
 55c:	80 91 e8 00 	lds	r24, 0x00E8
 560:	85 ff       	sbrs	r24, 5
 562:	2a c0       	rjmp	.+84     	; 0x5b8 <__vector_10+0xf4>
				keyboard_idle_count++;
 564:	80 91 93 01 	lds	r24, 0x0193
 568:	8f 5f       	subi	r24, 0xFF	; 255
 56a:	80 93 93 01 	sts	0x0193, r24
				if (keyboard_idle_count == keyboard_idle_config) {
 56e:	82 17       	cp	r24, r18
 570:	19 f5       	brne	.+70     	; 0x5b8 <__vector_10+0xf4>
					keyboard_idle_count = 0;
 572:	10 92 93 01 	sts	0x0193, r1
					UEDATX = keyboard_modifier_keys;
 576:	80 91 8a 01 	lds	r24, 0x018A
 57a:	80 93 f1 00 	sts	0x00F1, r24
					UEDATX = 0;
 57e:	10 92 f1 00 	sts	0x00F1, r1
					for (i=0; i<6; i++) {
						UEDATX = keyboard_keys[i];
 582:	80 91 8b 01 	lds	r24, 0x018B
 586:	80 93 f1 00 	sts	0x00F1, r24
 58a:	80 91 8c 01 	lds	r24, 0x018C
 58e:	80 93 f1 00 	sts	0x00F1, r24
 592:	80 91 8d 01 	lds	r24, 0x018D
 596:	80 93 f1 00 	sts	0x00F1, r24
 59a:	80 91 8e 01 	lds	r24, 0x018E
 59e:	80 93 f1 00 	sts	0x00F1, r24
 5a2:	80 91 8f 01 	lds	r24, 0x018F
 5a6:	80 93 f1 00 	sts	0x00F1, r24
 5aa:	80 91 90 01 	lds	r24, 0x0190
 5ae:	80 93 f1 00 	sts	0x00F1, r24
					}
					UEINTX = 0x3A;
 5b2:	8a e3       	ldi	r24, 0x3A	; 58
 5b4:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 5b8:	9f 91       	pop	r25
 5ba:	8f 91       	pop	r24
 5bc:	2f 91       	pop	r18
 5be:	0f 90       	pop	r0
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	0f 90       	pop	r0
 5c4:	1f 90       	pop	r1
 5c6:	18 95       	reti

000005c8 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 5c8:	1f 92       	push	r1
 5ca:	0f 92       	push	r0
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	0f 92       	push	r0
 5d0:	11 24       	eor	r1, r1
 5d2:	2f 93       	push	r18
 5d4:	3f 93       	push	r19
 5d6:	4f 93       	push	r20
 5d8:	5f 93       	push	r21
 5da:	6f 93       	push	r22
 5dc:	7f 93       	push	r23
 5de:	8f 93       	push	r24
 5e0:	9f 93       	push	r25
 5e2:	af 93       	push	r26
 5e4:	bf 93       	push	r27
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
 5ea:	ef 93       	push	r30
 5ec:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 5ee:	10 92 e9 00 	sts	0x00E9, r1
	intbits = UEINTX;
 5f2:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 5f6:	83 ff       	sbrs	r24, 3
 5f8:	86 c1       	rjmp	.+780    	; 0x906 <__vector_11+0x33e>
                bmRequestType = UEDATX;
 5fa:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
 5fe:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
 602:	80 91 f1 00 	lds	r24, 0x00F1
 606:	a8 2f       	mov	r26, r24
 608:	b0 e0       	ldi	r27, 0x00	; 0
                wValue |= (UEDATX << 8);
 60a:	20 91 f1 00 	lds	r18, 0x00F1
 60e:	92 2f       	mov	r25, r18
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	a8 2b       	or	r26, r24
 614:	b9 2b       	or	r27, r25
                wIndex = UEDATX;
 616:	80 91 f1 00 	lds	r24, 0x00F1
 61a:	68 2f       	mov	r22, r24
 61c:	70 e0       	ldi	r23, 0x00	; 0
                wIndex |= (UEDATX << 8);
 61e:	20 91 f1 00 	lds	r18, 0x00F1
 622:	92 2f       	mov	r25, r18
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	68 2b       	or	r22, r24
 628:	79 2b       	or	r23, r25
                wLength = UEDATX;
 62a:	80 91 f1 00 	lds	r24, 0x00F1
 62e:	c8 2f       	mov	r28, r24
 630:	d0 e0       	ldi	r29, 0x00	; 0
                wLength |= (UEDATX << 8);
 632:	20 91 f1 00 	lds	r18, 0x00F1
 636:	92 2f       	mov	r25, r18
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	c8 2b       	or	r28, r24
 63c:	d9 2b       	or	r29, r25
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 63e:	82 ef       	ldi	r24, 0xF2	; 242
 640:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
 644:	36 30       	cpi	r19, 0x06	; 6
 646:	09 f0       	breq	.+2      	; 0x64a <__vector_11+0x82>
 648:	56 c0       	rjmp	.+172    	; 0x6f6 <__vector_11+0x12e>
 64a:	2a ee       	ldi	r18, 0xEA	; 234
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	a9 01       	movw	r20, r18
 650:	45 50       	subi	r20, 0x05	; 5
 652:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
 654:	f9 01       	movw	r30, r18
 656:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
 658:	85 91       	lpm	r24, Z+
 65a:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
 65c:	8a 17       	cp	r24, r26
 65e:	9b 07       	cpc	r25, r27
 660:	e1 f4       	brne	.+56     	; 0x69a <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 662:	fa 01       	movw	r30, r20
 664:	85 91       	lpm	r24, Z+
 666:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
 668:	86 17       	cp	r24, r22
 66a:	97 07       	cpc	r25, r23
 66c:	b1 f4       	brne	.+44     	; 0x69a <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 66e:	9a 01       	movw	r18, r20
 670:	2e 5f       	subi	r18, 0xFE	; 254
 672:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
 674:	f9 01       	movw	r30, r18
 676:	65 91       	lpm	r22, Z+
 678:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
 67a:	2e 5f       	subi	r18, 0xFE	; 254
 67c:	3f 4f       	sbci	r19, 0xFF	; 255
 67e:	f9 01       	movw	r30, r18
 680:	24 91       	lpm	r18, Z+
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 682:	ce 01       	movw	r24, r28
 684:	cf 3f       	cpi	r28, 0xFF	; 255
 686:	d1 05       	cpc	r29, r1
 688:	19 f0       	breq	.+6      	; 0x690 <__vector_11+0xc8>
 68a:	10 f0       	brcs	.+4      	; 0x690 <__vector_11+0xc8>
 68c:	8f ef       	ldi	r24, 0xFF	; 255
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	42 2f       	mov	r20, r18
 692:	82 17       	cp	r24, r18
 694:	58 f4       	brcc	.+22     	; 0x6ac <__vector_11+0xe4>
 696:	48 2f       	mov	r20, r24
 698:	09 c0       	rjmp	.+18     	; 0x6ac <__vector_11+0xe4>
 69a:	29 5f       	subi	r18, 0xF9	; 249
 69c:	3f 4f       	sbci	r19, 0xFF	; 255
 69e:	49 5f       	subi	r20, 0xF9	; 249
 6a0:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 6a2:	f1 e0       	ldi	r31, 0x01	; 1
 6a4:	29 32       	cpi	r18, 0x29	; 41
 6a6:	3f 07       	cpc	r19, r31
 6a8:	a9 f6       	brne	.-86     	; 0x654 <__vector_11+0x8c>
 6aa:	2d c1       	rjmp	.+602    	; 0x906 <__vector_11+0x33e>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6ac:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 6ae:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 6b2:	28 2f       	mov	r18, r24
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	c9 01       	movw	r24, r18
 6b8:	85 70       	andi	r24, 0x05	; 5
 6ba:	90 70       	andi	r25, 0x00	; 0
 6bc:	89 2b       	or	r24, r25
 6be:	b9 f3       	breq	.-18     	; 0x6ae <__vector_11+0xe6>
				if (i & (1<<RXOUTI)) return;	// abort
 6c0:	22 fd       	sbrc	r18, 2
 6c2:	24 c1       	rjmp	.+584    	; 0x90c <__vector_11+0x344>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 6c4:	34 2f       	mov	r19, r20
 6c6:	41 32       	cpi	r20, 0x21	; 33
 6c8:	08 f0       	brcs	.+2      	; 0x6cc <__vector_11+0x104>
 6ca:	30 e2       	ldi	r19, 0x20	; 32
 6cc:	23 2f       	mov	r18, r19
 6ce:	cb 01       	movw	r24, r22
 6d0:	06 c0       	rjmp	.+12     	; 0x6de <__vector_11+0x116>
				for (i = n; i; i--) {
 6d2:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
 6d4:	01 96       	adiw	r24, 0x01	; 1
 6d6:	e4 91       	lpm	r30, Z+
 6d8:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 6dc:	21 50       	subi	r18, 0x01	; 1
 6de:	22 23       	and	r18, r18
 6e0:	c1 f7       	brne	.-16     	; 0x6d2 <__vector_11+0x10a>
 6e2:	63 0f       	add	r22, r19
 6e4:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 6e6:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6e8:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 6ec:	44 23       	and	r20, r20
 6ee:	f9 f6       	brne	.-66     	; 0x6ae <__vector_11+0xe6>
 6f0:	30 32       	cpi	r19, 0x20	; 32
 6f2:	e9 f2       	breq	.-70     	; 0x6ae <__vector_11+0xe6>
 6f4:	0b c1       	rjmp	.+534    	; 0x90c <__vector_11+0x344>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 6f6:	35 30       	cpi	r19, 0x05	; 5
 6f8:	61 f4       	brne	.+24     	; 0x712 <__vector_11+0x14a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6fa:	8e ef       	ldi	r24, 0xFE	; 254
 6fc:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 700:	80 91 e8 00 	lds	r24, 0x00E8
 704:	80 ff       	sbrs	r24, 0
 706:	fc cf       	rjmp	.-8      	; 0x700 <__vector_11+0x138>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 708:	8a 2f       	mov	r24, r26
 70a:	80 68       	ori	r24, 0x80	; 128
 70c:	80 93 e3 00 	sts	0x00E3, r24
 710:	fd c0       	rjmp	.+506    	; 0x90c <__vector_11+0x344>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 712:	39 30       	cpi	r19, 0x09	; 9
 714:	31 f5       	brne	.+76     	; 0x762 <__vector_11+0x19a>
 716:	44 23       	and	r20, r20
 718:	09 f0       	breq	.+2      	; 0x71c <__vector_11+0x154>
 71a:	70 c0       	rjmp	.+224    	; 0x7fc <__vector_11+0x234>
			usb_configuration = wValue;
 71c:	a0 93 92 01 	sts	0x0192, r26
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 720:	8e ef       	ldi	r24, 0xFE	; 254
 722:	80 93 e8 00 	sts	0x00E8, r24
 726:	82 e2       	ldi	r24, 0x22	; 34
 728:	91 e0       	ldi	r25, 0x01	; 1
 72a:	21 e0       	ldi	r18, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 72c:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
 730:	fc 01       	movw	r30, r24
 732:	01 96       	adiw	r24, 0x01	; 1
 734:	e4 91       	lpm	r30, Z+
				UECONX = en;
 736:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
 73a:	ee 23       	and	r30, r30
 73c:	69 f0       	breq	.+26     	; 0x758 <__vector_11+0x190>
					UECFG0X = pgm_read_byte(cfg++);
 73e:	ac 01       	movw	r20, r24
 740:	4f 5f       	subi	r20, 0xFF	; 255
 742:	5f 4f       	sbci	r21, 0xFF	; 255
 744:	fc 01       	movw	r30, r24
 746:	84 91       	lpm	r24, Z+
 748:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
 74c:	ca 01       	movw	r24, r20
 74e:	01 96       	adiw	r24, 0x01	; 1
 750:	fa 01       	movw	r30, r20
 752:	34 91       	lpm	r19, Z+
 754:	30 93 ed 00 	sts	0x00ED, r19
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 758:	2f 5f       	subi	r18, 0xFF	; 255
 75a:	25 30       	cpi	r18, 0x05	; 5
 75c:	39 f7       	brne	.-50     	; 0x72c <__vector_11+0x164>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 75e:	8e e1       	ldi	r24, 0x1E	; 30
 760:	48 c0       	rjmp	.+144    	; 0x7f2 <__vector_11+0x22a>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 762:	38 30       	cpi	r19, 0x08	; 8
 764:	51 f4       	brne	.+20     	; 0x77a <__vector_11+0x1b2>
 766:	40 38       	cpi	r20, 0x80	; 128
 768:	09 f0       	breq	.+2      	; 0x76c <__vector_11+0x1a4>
 76a:	48 c0       	rjmp	.+144    	; 0x7fc <__vector_11+0x234>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 76c:	80 91 e8 00 	lds	r24, 0x00E8
 770:	80 ff       	sbrs	r24, 0
 772:	fc cf       	rjmp	.-8      	; 0x76c <__vector_11+0x1a4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 774:	80 91 92 01 	lds	r24, 0x0192
 778:	7c c0       	rjmp	.+248    	; 0x872 <__vector_11+0x2aa>
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
 77a:	33 23       	and	r19, r19
 77c:	d1 f4       	brne	.+52     	; 0x7b2 <__vector_11+0x1ea>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 77e:	80 91 e8 00 	lds	r24, 0x00E8
 782:	80 ff       	sbrs	r24, 0
 784:	fc cf       	rjmp	.-8      	; 0x77e <__vector_11+0x1b6>

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 786:	42 38       	cpi	r20, 0x82	; 130
 788:	11 f0       	breq	.+4      	; 0x78e <__vector_11+0x1c6>
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	0d c0       	rjmp	.+26     	; 0x7a8 <__vector_11+0x1e0>
				UENUM = wIndex;
 78e:	60 93 e9 00 	sts	0x00E9, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
 792:	80 91 eb 00 	lds	r24, 0x00EB
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	25 e0       	ldi	r18, 0x05	; 5
 79a:	96 95       	lsr	r25
 79c:	87 95       	ror	r24
 79e:	2a 95       	dec	r18
 7a0:	e1 f7       	brne	.-8      	; 0x79a <__vector_11+0x1d2>
 7a2:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
 7a4:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
 7a8:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
 7ac:	10 92 f1 00 	sts	0x00F1, r1
 7b0:	7f c0       	rjmp	.+254    	; 0x8b0 <__vector_11+0x2e8>
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 7b2:	31 30       	cpi	r19, 0x01	; 1
 7b4:	11 f0       	breq	.+4      	; 0x7ba <__vector_11+0x1f2>
 7b6:	33 30       	cpi	r19, 0x03	; 3
 7b8:	09 f5       	brne	.+66     	; 0x7fc <__vector_11+0x234>
 7ba:	42 30       	cpi	r20, 0x02	; 2
 7bc:	f9 f4       	brne	.+62     	; 0x7fc <__vector_11+0x234>
 7be:	10 97       	sbiw	r26, 0x00	; 0
 7c0:	e9 f4       	brne	.+58     	; 0x7fc <__vector_11+0x234>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
 7c2:	26 2f       	mov	r18, r22
 7c4:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 7c6:	82 2f       	mov	r24, r18
 7c8:	81 50       	subi	r24, 0x01	; 1
 7ca:	84 30       	cpi	r24, 0x04	; 4
 7cc:	b8 f4       	brcc	.+46     	; 0x7fc <__vector_11+0x234>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7ce:	8e ef       	ldi	r24, 0xFE	; 254
 7d0:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 7d4:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
 7d8:	33 30       	cpi	r19, 0x03	; 3
 7da:	09 f4       	brne	.+2      	; 0x7de <__vector_11+0x216>
 7dc:	94 c0       	rjmp	.+296    	; 0x906 <__vector_11+0x33e>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 7de:	89 e1       	ldi	r24, 0x19	; 25
 7e0:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	02 c0       	rjmp	.+4      	; 0x7ee <__vector_11+0x226>
 7ea:	88 0f       	add	r24, r24
 7ec:	99 1f       	adc	r25, r25
 7ee:	2a 95       	dec	r18
 7f0:	e2 f7       	brpl	.-8      	; 0x7ea <__vector_11+0x222>
 7f2:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
 7f6:	10 92 ea 00 	sts	0x00EA, r1
 7fa:	88 c0       	rjmp	.+272    	; 0x90c <__vector_11+0x344>
				}
				return;
			}
		}
		#endif
		if (wIndex == KEYBOARD_INTERFACE) {
 7fc:	61 15       	cp	r22, r1
 7fe:	71 05       	cpc	r23, r1
 800:	09 f0       	breq	.+2      	; 0x804 <__vector_11+0x23c>
 802:	5a c0       	rjmp	.+180    	; 0x8b8 <__vector_11+0x2f0>
			if (bmRequestType == 0xA1) {
 804:	41 3a       	cpi	r20, 0xA1	; 161
 806:	c1 f5       	brne	.+112    	; 0x878 <__vector_11+0x2b0>
				if (bRequest == HID_GET_REPORT) {
 808:	31 30       	cpi	r19, 0x01	; 1
 80a:	09 f5       	brne	.+66     	; 0x84e <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 80c:	80 91 e8 00 	lds	r24, 0x00E8
 810:	80 ff       	sbrs	r24, 0
 812:	fc cf       	rjmp	.-8      	; 0x80c <__vector_11+0x244>
		#endif
		if (wIndex == KEYBOARD_INTERFACE) {
			if (bmRequestType == 0xA1) {
				if (bRequest == HID_GET_REPORT) {
					usb_wait_in_ready();
					UEDATX = keyboard_modifier_keys;
 814:	80 91 8a 01 	lds	r24, 0x018A
 818:	80 93 f1 00 	sts	0x00F1, r24
					UEDATX = 0;
 81c:	10 92 f1 00 	sts	0x00F1, r1
					for (i=0; i<6; i++) {
						UEDATX = keyboard_keys[i];
 820:	80 91 8b 01 	lds	r24, 0x018B
 824:	80 93 f1 00 	sts	0x00F1, r24
 828:	80 91 8c 01 	lds	r24, 0x018C
 82c:	80 93 f1 00 	sts	0x00F1, r24
 830:	80 91 8d 01 	lds	r24, 0x018D
 834:	80 93 f1 00 	sts	0x00F1, r24
 838:	80 91 8e 01 	lds	r24, 0x018E
 83c:	80 93 f1 00 	sts	0x00F1, r24
 840:	80 91 8f 01 	lds	r24, 0x018F
 844:	80 93 f1 00 	sts	0x00F1, r24
 848:	80 91 90 01 	lds	r24, 0x0190
 84c:	12 c0       	rjmp	.+36     	; 0x872 <__vector_11+0x2aa>
					}
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_IDLE) {
 84e:	32 30       	cpi	r19, 0x02	; 2
 850:	39 f4       	brne	.+14     	; 0x860 <__vector_11+0x298>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 852:	80 91 e8 00 	lds	r24, 0x00E8
 856:	80 ff       	sbrs	r24, 0
 858:	fc cf       	rjmp	.-8      	; 0x852 <__vector_11+0x28a>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_IDLE) {
					usb_wait_in_ready();
					UEDATX = keyboard_idle_config;
 85a:	80 91 87 01 	lds	r24, 0x0187
 85e:	09 c0       	rjmp	.+18     	; 0x872 <__vector_11+0x2aa>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_PROTOCOL) {
 860:	33 30       	cpi	r19, 0x03	; 3
 862:	09 f0       	breq	.+2      	; 0x866 <__vector_11+0x29e>
 864:	50 c0       	rjmp	.+160    	; 0x906 <__vector_11+0x33e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 866:	80 91 e8 00 	lds	r24, 0x00E8
 86a:	80 ff       	sbrs	r24, 0
 86c:	fc cf       	rjmp	.-8      	; 0x866 <__vector_11+0x29e>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_PROTOCOL) {
					usb_wait_in_ready();
					UEDATX = keyboard_protocol;
 86e:	80 91 88 01 	lds	r24, 0x0188
 872:	80 93 f1 00 	sts	0x00F1, r24
 876:	1c c0       	rjmp	.+56     	; 0x8b0 <__vector_11+0x2e8>
					usb_send_in();
					return;
				}
			}
			if (bmRequestType == 0x21) {
 878:	41 32       	cpi	r20, 0x21	; 33
 87a:	09 f0       	breq	.+2      	; 0x87e <__vector_11+0x2b6>
 87c:	44 c0       	rjmp	.+136    	; 0x906 <__vector_11+0x33e>
				if (bRequest == HID_SET_REPORT) {
 87e:	39 30       	cpi	r19, 0x09	; 9
 880:	61 f4       	brne	.+24     	; 0x89a <__vector_11+0x2d2>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 882:	80 91 e8 00 	lds	r24, 0x00E8
 886:	82 ff       	sbrs	r24, 2
 888:	fc cf       	rjmp	.-8      	; 0x882 <__vector_11+0x2ba>
				}
			}
			if (bmRequestType == 0x21) {
				if (bRequest == HID_SET_REPORT) {
					usb_wait_receive_out();
					keyboard_leds = UEDATX;
 88a:	80 91 f1 00 	lds	r24, 0x00F1
 88e:	80 93 91 01 	sts	0x0191, r24
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 892:	8b ef       	ldi	r24, 0xFB	; 251
 894:	80 93 e8 00 	sts	0x00E8, r24
 898:	0b c0       	rjmp	.+22     	; 0x8b0 <__vector_11+0x2e8>
					keyboard_leds = UEDATX;
					usb_ack_out();
					usb_send_in();
					return;
				}
				if (bRequest == HID_SET_IDLE) {
 89a:	3a 30       	cpi	r19, 0x0A	; 10
 89c:	29 f4       	brne	.+10     	; 0x8a8 <__vector_11+0x2e0>
					keyboard_idle_config = (wValue >> 8);
 89e:	b0 93 87 01 	sts	0x0187, r27
					keyboard_idle_count = 0;
 8a2:	10 92 93 01 	sts	0x0193, r1
 8a6:	04 c0       	rjmp	.+8      	; 0x8b0 <__vector_11+0x2e8>
					//usb_wait_in_ready();
					usb_send_in();
					return;
				}
				if (bRequest == HID_SET_PROTOCOL) {
 8a8:	3b 30       	cpi	r19, 0x0B	; 11
 8aa:	69 f5       	brne	.+90     	; 0x906 <__vector_11+0x33e>
					keyboard_protocol = wValue;
 8ac:	a0 93 88 01 	sts	0x0188, r26
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 8b0:	8e ef       	ldi	r24, 0xFE	; 254
 8b2:	80 93 e8 00 	sts	0x00E8, r24
 8b6:	2a c0       	rjmp	.+84     	; 0x90c <__vector_11+0x344>
					usb_send_in();
					return;
				}
			}
		}
		if (wIndex == DEBUG_INTERFACE) {
 8b8:	61 30       	cpi	r22, 0x01	; 1
 8ba:	71 05       	cpc	r23, r1
 8bc:	21 f5       	brne	.+72     	; 0x906 <__vector_11+0x33e>
			if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
 8be:	31 30       	cpi	r19, 0x01	; 1
 8c0:	11 f5       	brne	.+68     	; 0x906 <__vector_11+0x33e>
 8c2:	41 3a       	cpi	r20, 0xA1	; 161
 8c4:	01 f5       	brne	.+64     	; 0x906 <__vector_11+0x33e>
				len = wLength;
 8c6:	4c 2f       	mov	r20, r28
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 8c8:	5e ef       	ldi	r21, 0xFE	; 254
			if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
				len = wLength;
				do {
					// wait for host ready for IN packet
					do {
						i = UEINTX;
 8ca:	80 91 e8 00 	lds	r24, 0x00E8
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 8ce:	28 2f       	mov	r18, r24
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	c9 01       	movw	r24, r18
 8d4:	85 70       	andi	r24, 0x05	; 5
 8d6:	90 70       	andi	r25, 0x00	; 0
 8d8:	89 2b       	or	r24, r25
 8da:	b9 f3       	breq	.-18     	; 0x8ca <__vector_11+0x302>
					if (i & (1<<RXOUTI)) return;	// abort
 8dc:	22 fd       	sbrc	r18, 2
 8de:	16 c0       	rjmp	.+44     	; 0x90c <__vector_11+0x344>
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 8e0:	94 2f       	mov	r25, r20
 8e2:	41 32       	cpi	r20, 0x21	; 33
 8e4:	08 f0       	brcs	.+2      	; 0x8e8 <__vector_11+0x320>
 8e6:	90 e2       	ldi	r25, 0x20	; 32
 8e8:	89 2f       	mov	r24, r25
 8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <__vector_11+0x32a>
					for (i = n; i; i--) {
						UEDATX = 0;
 8ec:	10 92 f1 00 	sts	0x00F1, r1
						i = UEINTX;
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
					if (i & (1<<RXOUTI)) return;	// abort
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
					for (i = n; i; i--) {
 8f0:	81 50       	subi	r24, 0x01	; 1
 8f2:	88 23       	and	r24, r24
 8f4:	d9 f7       	brne	.-10     	; 0x8ec <__vector_11+0x324>
						UEDATX = 0;
					}
					len -= n;
 8f6:	49 1b       	sub	r20, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 8f8:	50 93 e8 00 	sts	0x00E8, r21
					for (i = n; i; i--) {
						UEDATX = 0;
					}
					len -= n;
					usb_send_in();
				} while (len || n == ENDPOINT0_SIZE);
 8fc:	44 23       	and	r20, r20
 8fe:	29 f7       	brne	.-54     	; 0x8ca <__vector_11+0x302>
 900:	90 32       	cpi	r25, 0x20	; 32
 902:	19 f3       	breq	.-58     	; 0x8ca <__vector_11+0x302>
 904:	03 c0       	rjmp	.+6      	; 0x90c <__vector_11+0x344>
				return;
			}
		}
	}
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 906:	81 e2       	ldi	r24, 0x21	; 33
 908:	80 93 eb 00 	sts	0x00EB, r24
}
 90c:	ff 91       	pop	r31
 90e:	ef 91       	pop	r30
 910:	df 91       	pop	r29
 912:	cf 91       	pop	r28
 914:	bf 91       	pop	r27
 916:	af 91       	pop	r26
 918:	9f 91       	pop	r25
 91a:	8f 91       	pop	r24
 91c:	7f 91       	pop	r23
 91e:	6f 91       	pop	r22
 920:	5f 91       	pop	r21
 922:	4f 91       	pop	r20
 924:	3f 91       	pop	r19
 926:	2f 91       	pop	r18
 928:	0f 90       	pop	r0
 92a:	0f be       	out	0x3f, r0	; 63
 92c:	0f 90       	pop	r0
 92e:	1f 90       	pop	r1
 930:	18 95       	reti

00000932 <print_P>:
#include <avr/pgmspace.h>

#include "print.h"

void print_P(const char *s)
{
 932:	1f 93       	push	r17
 934:	cf 93       	push	r28
 936:	df 93       	push	r29
 938:	ec 01       	movw	r28, r24
 93a:	fe 01       	movw	r30, r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
 93c:	21 96       	adiw	r28, 0x01	; 1
 93e:	14 91       	lpm	r17, Z+
		if (!c) break;
 940:	11 23       	and	r17, r17
 942:	39 f0       	breq	.+14     	; 0x952 <print_P+0x20>
		if (c == '\n') usb_debug_putchar('\r');
 944:	1a 30       	cpi	r17, 0x0A	; 10
 946:	11 f4       	brne	.+4      	; 0x94c <print_P+0x1a>
 948:	8d e0       	ldi	r24, 0x0D	; 13
 94a:	76 dd       	rcall	.-1300   	; 0x438 <usb_debug_putchar>
		usb_debug_putchar(c);
 94c:	81 2f       	mov	r24, r17
 94e:	74 dd       	rcall	.-1304   	; 0x438 <usb_debug_putchar>
 950:	f4 cf       	rjmp	.-24     	; 0x93a <print_P+0x8>
	}
}
 952:	df 91       	pop	r29
 954:	cf 91       	pop	r28
 956:	1f 91       	pop	r17
 958:	08 95       	ret

0000095a <_exit>:
 95a:	f8 94       	cli

0000095c <__stop_program>:
 95c:	ff cf       	rjmp	.-2      	; 0x95c <__stop_program>
