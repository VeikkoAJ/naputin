
naputin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  00000972  00000a06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000972  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080019c  0080019c  00000aa2  2**0
                  ALLOC
  3 .debug_aranges 000000b0  00000000  00000000  00000aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000015e  00000000  00000000  00000b52  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cca  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003d6  00000000  00000000  0000197a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ba0  00000000  00000000  00001d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  000028f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040b  00000000  00000000  000029f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000780  00000000  00000000  00002dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  0000357b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return usb_keyboard_send();
}

// send the contents of keyboard_keys and keyboard_modifier_keys
int8_t usb_keyboard_send(void)
{
   0:	fa c0       	rjmp	.+500    	; 0x1f6 <__ctors_end>

void phex16(unsigned int i)
{
	phex(i >> 8);
	phex(i);
}
   2:	00 00       	nop
   4:	13 c1       	rjmp	.+550    	; 0x22c <__bad_interrupt>
   6:	00 00       	nop
   8:	11 c1       	rjmp	.+546    	; 0x22c <__bad_interrupt>
   a:	00 00       	nop
   c:	0f c1       	rjmp	.+542    	; 0x22c <__bad_interrupt>
   e:	00 00       	nop
  10:	0d c1       	rjmp	.+538    	; 0x22c <__bad_interrupt>
  12:	00 00       	nop
  14:	0b c1       	rjmp	.+534    	; 0x22c <__bad_interrupt>
  16:	00 00       	nop
  18:	09 c1       	rjmp	.+530    	; 0x22c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	07 c1       	rjmp	.+526    	; 0x22c <__bad_interrupt>
  1e:	00 00       	nop
  20:	05 c1       	rjmp	.+522    	; 0x22c <__bad_interrupt>
  22:	00 00       	nop
  24:	03 c1       	rjmp	.+518    	; 0x22c <__bad_interrupt>
  26:	00 00       	nop
  28:	57 c2       	rjmp	.+1198   	; 0x4d8 <__vector_10>
  2a:	00 00       	nop
  2c:	d7 c2       	rjmp	.+1454   	; 0x5dc <__vector_11>
  2e:	00 00       	nop
  30:	fd c0       	rjmp	.+506    	; 0x22c <__bad_interrupt>
  32:	00 00       	nop
  34:	fb c0       	rjmp	.+502    	; 0x22c <__bad_interrupt>
  36:	00 00       	nop
  38:	f9 c0       	rjmp	.+498    	; 0x22c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f7 c0       	rjmp	.+494    	; 0x22c <__bad_interrupt>
  3e:	00 00       	nop
  40:	f5 c0       	rjmp	.+490    	; 0x22c <__bad_interrupt>
  42:	00 00       	nop
  44:	f3 c0       	rjmp	.+486    	; 0x22c <__bad_interrupt>
  46:	00 00       	nop
  48:	f1 c0       	rjmp	.+482    	; 0x22c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ef c0       	rjmp	.+478    	; 0x22c <__bad_interrupt>
  4e:	00 00       	nop
  50:	ed c0       	rjmp	.+474    	; 0x22c <__bad_interrupt>
  52:	00 00       	nop
  54:	eb c0       	rjmp	.+470    	; 0x22c <__bad_interrupt>
  56:	00 00       	nop
  58:	e9 c0       	rjmp	.+466    	; 0x22c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e7 c0       	rjmp	.+462    	; 0x22c <__bad_interrupt>
  5e:	00 00       	nop
  60:	e5 c0       	rjmp	.+458    	; 0x22c <__bad_interrupt>
  62:	00 00       	nop
  64:	e3 c0       	rjmp	.+454    	; 0x22c <__bad_interrupt>
  66:	00 00       	nop
  68:	e1 c0       	rjmp	.+450    	; 0x22c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	df c0       	rjmp	.+446    	; 0x22c <__bad_interrupt>
  6e:	00 00       	nop
  70:	dd c0       	rjmp	.+442    	; 0x22c <__bad_interrupt>
  72:	00 00       	nop
  74:	db c0       	rjmp	.+438    	; 0x22c <__bad_interrupt>
  76:	00 00       	nop
  78:	d9 c0       	rjmp	.+434    	; 0x22c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d7 c0       	rjmp	.+430    	; 0x22c <__bad_interrupt>
  7e:	00 00       	nop
  80:	d5 c0       	rjmp	.+426    	; 0x22c <__bad_interrupt>
  82:	00 00       	nop
  84:	d3 c0       	rjmp	.+422    	; 0x22c <__bad_interrupt>
  86:	00 00       	nop
  88:	d1 c0       	rjmp	.+418    	; 0x22c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	cf c0       	rjmp	.+414    	; 0x22c <__bad_interrupt>
  8e:	00 00       	nop
  90:	cd c0       	rjmp	.+410    	; 0x22c <__bad_interrupt>
  92:	00 00       	nop
  94:	cb c0       	rjmp	.+406    	; 0x22c <__bad_interrupt>
  96:	00 00       	nop
  98:	c9 c0       	rjmp	.+402    	; 0x22c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c7 c0       	rjmp	.+398    	; 0x22c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c5 c0       	rjmp	.+394    	; 0x22c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c3 c0       	rjmp	.+390    	; 0x22c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c1 c0       	rjmp	.+386    	; 0x22c <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__c.1422>:
  ac:	0a 00                                               ..

000000ae <__c.1417>:
  ae:	30 2c 20 00                                         0, .

000000b2 <__c.1415>:
  b2:	31 2c 20 00                                         1, .

000000b6 <__c.1413>:
  b6:	0a 73 74 61 74 65 3a 0a 00                          .state:..

000000bf <__c.1399>:
  bf:	0a 6d 61 69 6e 20 6c 6f 6f 70 20 73 74 61 72 74     .main loop start
  cf:	65 64 0a 00                                         ed..

000000d3 <__c.1394>:
  d3:	75 73 62 20 63 6f 6e 66 69 67 75 72 65 64 0a 00     usb configured..

000000e3 <descriptor_list>:
  e3:	00 01 00 00 2a 01 12 00 02 00 00 3c 01 3b 00 22     ....*......<.;."
  f3:	00 00 77 01 3f 00 21 00 00 4e 01 09 00 22 01 00     ..w.?.!..N..."..
 103:	b6 01 15 00 21 01 00 67 01 09 00 03 00 00 cb 01     ....!..g........
 113:	04 01 03 09 04 cf 01 10 02 03 09 04 e1 01 12        ...............

00000122 <endpoint_config_table>:
 122:	00 00 01 c1 06 01 c1 26                             .......&

0000012a <device_descriptor>:
 12a:	12 01 00 02 00 00 00 20 c0 16 7d 04 00 01 01 02     ....... ..}.....
 13a:	00 01                                               ..

0000013c <config1_descriptor>:
 13c:	09 02 3b 00 02 01 00 c0 32 09 04 00 00 01 03 01     ..;.....2.......
 14c:	01 00 09 21 11 01 00 01 22 3f 00 07 05 83 03 08     ...!...."?......
 15c:	00 01 09 04 01 00 01 03 00 00 00 09 21 11 01 00     ............!...
 16c:	01 22 15 00 07 05 84 03 20 00 01                    ."...... ..

00000177 <keyboard_hid_report_desc>:
 177:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
 187:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
 197:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
 1a7:	75 08 15 00 25 68 05 07 19 00 29 68 81 00 c0        u...%h....)h...

000001b6 <debug_hid_report_desc>:
 1b6:	06 31 ff 09 74 a1 53 75 08 15 00 26 ff 00 95 20     .1..t.Su...&... 
 1c6:	09 75 81 02 c0                                      .u...

000001cb <string0>:
 1cb:	04 03 09 04                                         ....

000001cf <string1>:
 1cf:	10 03 4d 00 66 00 67 00 4e 00 61 00 6d 00 65 00     ..M.f.g.N.a.m.e.
 1df:	00 00                                               ..

000001e1 <string2>:
 1e1:	12 03 4b 00 65 00 79 00 62 00 6f 00 61 00 72 00     ..K.e.y.b.o.a.r.
 1f1:	64 00 00 00 00                                      d....

000001f6 <__ctors_end>:
 1f6:	11 24       	eor	r1, r1
 1f8:	1f be       	out	0x3f, r1	; 63
 1fa:	cf ef       	ldi	r28, 0xFF	; 255
 1fc:	da e0       	ldi	r29, 0x0A	; 10
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	cd bf       	out	0x3d, r28	; 61

00000202 <__do_copy_data>:
 202:	11 e0       	ldi	r17, 0x01	; 1
 204:	a0 e0       	ldi	r26, 0x00	; 0
 206:	b1 e0       	ldi	r27, 0x01	; 1
 208:	e2 e7       	ldi	r30, 0x72	; 114
 20a:	f9 e0       	ldi	r31, 0x09	; 9
 20c:	02 c0       	rjmp	.+4      	; 0x212 <.do_copy_data_start>

0000020e <.do_copy_data_loop>:
 20e:	05 90       	lpm	r0, Z+
 210:	0d 92       	st	X+, r0

00000212 <.do_copy_data_start>:
 212:	ac 39       	cpi	r26, 0x9C	; 156
 214:	b1 07       	cpc	r27, r17
 216:	d9 f7       	brne	.-10     	; 0x20e <.do_copy_data_loop>

00000218 <__do_clear_bss>:
 218:	11 e0       	ldi	r17, 0x01	; 1
 21a:	ac e9       	ldi	r26, 0x9C	; 156
 21c:	b1 e0       	ldi	r27, 0x01	; 1
 21e:	01 c0       	rjmp	.+2      	; 0x222 <.do_clear_bss_start>

00000220 <.do_clear_bss_loop>:
 220:	1d 92       	st	X+, r1

00000222 <.do_clear_bss_start>:
 222:	a9 3a       	cpi	r26, 0xA9	; 169
 224:	b1 07       	cpc	r27, r17
 226:	e1 f7       	brne	.-8      	; 0x220 <.do_clear_bss_loop>
 228:	02 d0       	rcall	.+4      	; 0x22e <main>
 22a:	a1 c3       	rjmp	.+1858   	; 0x96e <_exit>

0000022c <__bad_interrupt>:
 22c:	e9 ce       	rjmp	.-558    	; 0x0 <__vectors>

0000022e <main>:
#define CPU_PRESCALE(n) (CLKPR = 0x80, CLKPR = (n))

uint16_t idle_count = 0;

int main(void)
{
 22e:	2f 92       	push	r2
 230:	3f 92       	push	r3
 232:	4f 92       	push	r4
 234:	5f 92       	push	r5
 236:	6f 92       	push	r6
 238:	7f 92       	push	r7
 23a:	8f 92       	push	r8
 23c:	9f 92       	push	r9
 23e:	af 92       	push	r10
 240:	bf 92       	push	r11
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	df 93       	push	r29
 250:	cf 93       	push	r28
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	ca 55       	subi	r28, 0x5A	; 90
 258:	d0 40       	sbci	r29, 0x00	; 0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	f8 94       	cli
 25e:	de bf       	out	0x3e, r29	; 62
 260:	0f be       	out	0x3f, r0	; 63
 262:	cd bf       	out	0x3d, r28	; 61
        7,
        3,
        2,
        1};

    CPU_PRESCALE(0);
 264:	80 e8       	ldi	r24, 0x80	; 128
 266:	80 93 61 00 	sts	0x0061, r24
 26a:	10 92 61 00 	sts	0x0061, r1

    usb_init();
 26e:	d4 d0       	rcall	.+424    	; 0x418 <usb_init>
    while (!usb_configured())
 270:	ea d0       	rcall	.+468    	; 0x446 <usb_configured>
 272:	88 23       	and	r24, r24
 274:	e9 f3       	breq	.-6      	; 0x270 <main+0x42>
        ;
    print("usb configured\n");
 276:	83 ed       	ldi	r24, 0xD3	; 211
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	65 d3       	rcall	.+1738   	; 0x946 <print_P>
 27c:	80 e1       	ldi	r24, 0x10	; 16
 27e:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 280:	20 e9       	ldi	r18, 0x90	; 144
 282:	31 e0       	ldi	r19, 0x01	; 1
 284:	f9 01       	movw	r30, r18
 286:	31 97       	sbiw	r30, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <main+0x58>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 28a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 28c:	d9 f7       	brne	.-10     	; 0x284 <main+0x56>
uint16_t idle_count = 0;

int main(void)
{
    uint8_t reset_idle;
    bool state[6][15] = {0};
 28e:	fe 01       	movw	r30, r28
 290:	31 96       	adiw	r30, 0x01	; 1
 292:	8a e5       	ldi	r24, 0x5A	; 90
 294:	df 01       	movw	r26, r30
 296:	1d 92       	st	X+, r1
 298:	8a 95       	dec	r24
 29a:	e9 f7       	brne	.-6      	; 0x296 <main+0x68>
        // reset states
        for (i = 0; i < 6; i++)
        {
            for (b = 0; i < 15; i++)
            {
                state[i][b] = false;
 29c:	5f 01       	movw	r10, r30
        // columns (inputs): F0 F1 F4 F5 F6 F7 B6 B5 B4 D7 D6 C7 C6 D3 D2
        // rows (outputs): D1 D0 B7 B3 B2 B1
        DDRB = 0b10001111; // 3,2,1 outputs,    6,5,4       inputs,     7,0         unused
        DDRC = 0b00111111; //       outputs,    7,6         inputs,     5,4,3,2,1,0 unused
        DDRD = 0b01110011; // 1,0   outputs,    7,3,2       inputs,     4,5,6       unused
        DDRF = 0b00001100; //       outputs,    0,1,4,5,6,7 inputs,     2,3         unused
 29e:	2c e0       	ldi	r18, 0x0C	; 12
 2a0:	82 2e       	mov	r8, r18

        // set all pins high
        PORTB = 0b1111111;
 2a2:	9f e7       	ldi	r25, 0x7F	; 127
 2a4:	99 2e       	mov	r9, r25

        // read all ports
        for (i = 0; i < 6; i++)
        {
            // set i:th row low
            *(outputRows[i]) &= ~(1 << outputRowShifts[i]);
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	28 2e       	mov	r2, r24
 2aa:	31 2c       	mov	r3, r1
            // set i:th row back high
            *(outputRows[i]) |= (1 << outputRowShifts[i]);
        }
        // add sum logic for changes

        print("\nstate:\n");
 2ac:	00 e1       	ldi	r16, 0x10	; 16
 2ae:	40 2e       	mov	r4, r16
 2b0:	51 2c       	mov	r5, r1
 2b2:	4c 0e       	add	r4, r28
 2b4:	5d 1e       	adc	r5, r29
 2b6:	10 e9       	ldi	r17, 0x90	; 144
 2b8:	61 2e       	mov	r6, r17
 2ba:	11 e0       	ldi	r17, 0x01	; 1
 2bc:	71 2e       	mov	r7, r17
    _delay_ms(1000);

    uint8_t i, b, i_key;
    while (1)
    {
        print("\nmain loop started\n");
 2be:	8f eb       	ldi	r24, 0xBF	; 191
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	41 d3       	rcall	.+1666   	; 0x946 <print_P>
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0d c0       	rjmp	.+26     	; 0x2e2 <main+0xb4>
        // reset states
        for (i = 0; i < 6; i++)
        {
            for (b = 0; i < 15; i++)
            {
                state[i][b] = false;
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	fc 01       	movw	r30, r24
 2cc:	b4 e0       	ldi	r27, 0x04	; 4
 2ce:	ee 0f       	add	r30, r30
 2d0:	ff 1f       	adc	r31, r31
 2d2:	ba 95       	dec	r27
 2d4:	e1 f7       	brne	.-8      	; 0x2ce <main+0xa0>
 2d6:	e8 1b       	sub	r30, r24
 2d8:	f9 0b       	sbc	r31, r25
 2da:	ea 0d       	add	r30, r10
 2dc:	fb 1d       	adc	r31, r11
 2de:	10 82       	st	Z, r1
    {
        print("\nmain loop started\n");
        // reset states
        for (i = 0; i < 6; i++)
        {
            for (b = 0; i < 15; i++)
 2e0:	82 2f       	mov	r24, r18
 2e2:	28 2f       	mov	r18, r24
 2e4:	2f 5f       	subi	r18, 0xFF	; 255
 2e6:	8f 30       	cpi	r24, 0x0F	; 15
 2e8:	78 f3       	brcs	.-34     	; 0x2c8 <main+0x9a>
    uint8_t i, b, i_key;
    while (1)
    {
        print("\nmain loop started\n");
        // reset states
        for (i = 0; i < 6; i++)
 2ea:	82 2f       	mov	r24, r18
 2ec:	26 30       	cpi	r18, 0x06	; 6
 2ee:	c8 f3       	brcs	.-14     	; 0x2e2 <main+0xb4>
        i_key = 0;
        // keyboard_modifier_keys = 0x00;
        // configure ports 0 = input, 1 = output, 1 = unused (as outputs)
        // columns (inputs): F0 F1 F4 F5 F6 F7 B6 B5 B4 D7 D6 C7 C6 D3 D2
        // rows (outputs): D1 D0 B7 B3 B2 B1
        DDRB = 0b10001111; // 3,2,1 outputs,    6,5,4       inputs,     7,0         unused
 2f0:	bf e8       	ldi	r27, 0x8F	; 143
 2f2:	b4 b9       	out	0x04, r27	; 4
        DDRC = 0b00111111; //       outputs,    7,6         inputs,     5,4,3,2,1,0 unused
 2f4:	ef e3       	ldi	r30, 0x3F	; 63
 2f6:	e7 b9       	out	0x07, r30	; 7
        DDRD = 0b01110011; // 1,0   outputs,    7,3,2       inputs,     4,5,6       unused
 2f8:	f3 e7       	ldi	r31, 0x73	; 115
 2fa:	fa b9       	out	0x0a, r31	; 10
        DDRF = 0b00001100; //       outputs,    0,1,4,5,6,7 inputs,     2,3         unused
 2fc:	80 ba       	out	0x10, r8	; 16

        // set all pins high
        PORTB = 0b1111111;
 2fe:	95 b8       	out	0x05, r9	; 5
        PORTC = 0b1111111;
 300:	98 b8       	out	0x08, r9	; 8
        PORTD = 0b1111111;
 302:	9b b8       	out	0x0b, r9	; 11
        PORTF = 0b1111111;
 304:	91 ba       	out	0x11, r9	; 17
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	50 e0       	ldi	r21, 0x00	; 0

        // read all ports
        for (i = 0; i < 6; i++)
        {
            // set i:th row low
            *(outputRows[i]) &= ~(1 << outputRowShifts[i]);
 30a:	fa 01       	movw	r30, r20
 30c:	ee 0f       	add	r30, r30
 30e:	ff 1f       	adc	r31, r31
 310:	e0 5a       	subi	r30, 0xA0	; 160
 312:	fe 4f       	sbci	r31, 0xFE	; 254
 314:	a0 81       	ld	r26, Z
 316:	b1 81       	ldd	r27, Z+1	; 0x01
 318:	fa 01       	movw	r30, r20
 31a:	e6 5a       	subi	r30, 0xA6	; 166
 31c:	fe 4f       	sbci	r31, 0xFE	; 254
 31e:	c1 01       	movw	r24, r2
 320:	00 80       	ld	r0, Z
 322:	02 c0       	rjmp	.+4      	; 0x328 <main+0xfa>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	0a 94       	dec	r0
 32a:	e2 f7       	brpl	.-8      	; 0x324 <main+0xf6>
 32c:	68 2f       	mov	r22, r24
 32e:	98 2f       	mov	r25, r24
 330:	90 95       	com	r25
 332:	8c 91       	ld	r24, X
 334:	89 23       	and	r24, r25
 336:	8c 93       	st	X, r24
 338:	da 01       	movw	r26, r20
 33a:	e4 e0       	ldi	r30, 0x04	; 4
 33c:	aa 0f       	add	r26, r26
 33e:	bb 1f       	adc	r27, r27
 340:	ea 95       	dec	r30
 342:	e1 f7       	brne	.-8      	; 0x33c <main+0x10e>
 344:	a4 1b       	sub	r26, r20
 346:	b5 0b       	sbc	r27, r21
 348:	aa 0d       	add	r26, r10
 34a:	bb 1d       	adc	r27, r11
 34c:	20 e0       	ldi	r18, 0x00	; 0
 34e:	30 e0       	ldi	r19, 0x00	; 0

            // check all columns
            for (b = 0; b < 15; b++)
            {
                state[i][b] = (*(inputColumns[b]) >> inputColumnShifts[b]) & 0x01;
 350:	f9 01       	movw	r30, r18
 352:	ee 0f       	add	r30, r30
 354:	ff 1f       	adc	r31, r31
 356:	e5 58       	subi	r30, 0x85	; 133
 358:	fe 4f       	sbci	r31, 0xFE	; 254
 35a:	01 90       	ld	r0, Z+
 35c:	f0 81       	ld	r31, Z
 35e:	e0 2d       	mov	r30, r0
 360:	80 81       	ld	r24, Z
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	f9 01       	movw	r30, r18
 366:	e4 59       	subi	r30, 0x94	; 148
 368:	fe 4f       	sbci	r31, 0xFE	; 254
 36a:	00 80       	ld	r0, Z
 36c:	02 c0       	rjmp	.+4      	; 0x372 <main+0x144>
 36e:	95 95       	asr	r25
 370:	87 95       	ror	r24
 372:	0a 94       	dec	r0
 374:	e2 f7       	brpl	.-8      	; 0x36e <main+0x140>
 376:	81 70       	andi	r24, 0x01	; 1
 378:	90 70       	andi	r25, 0x00	; 0
 37a:	8d 93       	st	X+, r24
 37c:	2f 5f       	subi	r18, 0xFF	; 255
 37e:	3f 4f       	sbci	r19, 0xFF	; 255
        {
            // set i:th row low
            *(outputRows[i]) &= ~(1 << outputRowShifts[i]);

            // check all columns
            for (b = 0; b < 15; b++)
 380:	2f 30       	cpi	r18, 0x0F	; 15
 382:	31 05       	cpc	r19, r1
 384:	29 f7       	brne	.-54     	; 0x350 <main+0x122>
            {
                state[i][b] = (*(inputColumns[b]) >> inputColumnShifts[b]) & 0x01;
            }
            // set i:th row back high
            *(outputRows[i]) |= (1 << outputRowShifts[i]);
 386:	fa 01       	movw	r30, r20
 388:	ee 0f       	add	r30, r30
 38a:	ff 1f       	adc	r31, r31
 38c:	e0 5a       	subi	r30, 0xA0	; 160
 38e:	fe 4f       	sbci	r31, 0xFE	; 254
 390:	01 90       	ld	r0, Z+
 392:	f0 81       	ld	r31, Z
 394:	e0 2d       	mov	r30, r0
 396:	80 81       	ld	r24, Z
 398:	86 2b       	or	r24, r22
 39a:	80 83       	st	Z, r24
 39c:	4f 5f       	subi	r20, 0xFF	; 255
 39e:	5f 4f       	sbci	r21, 0xFF	; 255
        PORTC = 0b1111111;
        PORTD = 0b1111111;
        PORTF = 0b1111111;

        // read all ports
        for (i = 0; i < 6; i++)
 3a0:	46 30       	cpi	r20, 0x06	; 6
 3a2:	51 05       	cpc	r21, r1
 3a4:	09 f0       	breq	.+2      	; 0x3a8 <main+0x17a>
 3a6:	b1 cf       	rjmp	.-158    	; 0x30a <main+0xdc>
            // set i:th row back high
            *(outputRows[i]) |= (1 << outputRowShifts[i]);
        }
        // add sum logic for changes

        print("\nstate:\n");
 3a8:	86 eb       	ldi	r24, 0xB6	; 182
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	cc d2       	rcall	.+1432   	; 0x946 <print_P>
 3ae:	62 01       	movw	r12, r4
 3b0:	ee 24       	eor	r14, r14
 3b2:	ff 24       	eor	r15, r15
 3b4:	1e c0       	rjmp	.+60     	; 0x3f2 <main+0x1c4>
        for (i = 0; i < 6; i++)
        {

            for (b = 0; b < 15; b++)
            {
                if (state[i][b])
 3b6:	d8 01       	movw	r26, r16
 3b8:	8c 91       	ld	r24, X
 3ba:	88 23       	and	r24, r24
 3bc:	19 f0       	breq	.+6      	; 0x3c4 <main+0x196>
                {
                    print("1, ");
 3be:	82 eb       	ldi	r24, 0xB2	; 178
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <main+0x19a>
                }
                else
                {
                    print("0, ");
 3c4:	8e ea       	ldi	r24, 0xAE	; 174
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	be d2       	rcall	.+1404   	; 0x946 <print_P>
 3ca:	0f 5f       	subi	r16, 0xFF	; 255
 3cc:	1f 4f       	sbci	r17, 0xFF	; 255

        print("\nstate:\n");
        for (i = 0; i < 6; i++)
        {

            for (b = 0; b < 15; b++)
 3ce:	0c 15       	cp	r16, r12
 3d0:	1d 05       	cpc	r17, r13
 3d2:	89 f7       	brne	.-30     	; 0x3b6 <main+0x188>
                else
                {
                    print("0, ");
                }
            }
            print("\n");
 3d4:	8c ea       	ldi	r24, 0xAC	; 172
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	b6 d2       	rcall	.+1388   	; 0x946 <print_P>
 3da:	08 94       	sec
 3dc:	e1 1c       	adc	r14, r1
 3de:	f1 1c       	adc	r15, r1
 3e0:	9f e0       	ldi	r25, 0x0F	; 15
 3e2:	c9 2e       	mov	r12, r25
 3e4:	d1 2c       	mov	r13, r1
 3e6:	c0 0e       	add	r12, r16
 3e8:	d1 1e       	adc	r13, r17
            *(outputRows[i]) |= (1 << outputRowShifts[i]);
        }
        // add sum logic for changes

        print("\nstate:\n");
        for (i = 0; i < 6; i++)
 3ea:	b6 e0       	ldi	r27, 0x06	; 6
 3ec:	eb 16       	cp	r14, r27
 3ee:	f1 04       	cpc	r15, r1
 3f0:	59 f0       	breq	.+22     	; 0x408 <main+0x1da>
 3f2:	87 01       	movw	r16, r14
 3f4:	84 e0       	ldi	r24, 0x04	; 4
 3f6:	00 0f       	add	r16, r16
 3f8:	11 1f       	adc	r17, r17
 3fa:	8a 95       	dec	r24
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <main+0x1c8>
 3fe:	0e 19       	sub	r16, r14
 400:	1f 09       	sbc	r17, r15
 402:	0a 0d       	add	r16, r10
 404:	1b 1d       	adc	r17, r11
 406:	d7 cf       	rjmp	.-82     	; 0x3b6 <main+0x188>
 408:	80 e1       	ldi	r24, 0x10	; 16
 40a:	97 e2       	ldi	r25, 0x27	; 39
 40c:	f3 01       	movw	r30, r6
 40e:	31 97       	sbiw	r30, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <main+0x1e0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 412:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 414:	d9 f7       	brne	.-10     	; 0x40c <main+0x1de>
 416:	53 cf       	rjmp	.-346    	; 0x2be <main+0x90>

00000418 <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	80 93 d7 00 	sts	0x00D7, r24
	USB_FREEZE();				// enable USB
 41e:	80 ea       	ldi	r24, 0xA0	; 160
 420:	80 93 d8 00 	sts	0x00D8, r24
	PLL_CONFIG();				// config PLL
 424:	82 e1       	ldi	r24, 0x12	; 18
 426:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 428:	09 b4       	in	r0, 0x29	; 41
 42a:	00 fe       	sbrs	r0, 0
 42c:	fd cf       	rjmp	.-6      	; 0x428 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 42e:	80 e9       	ldi	r24, 0x90	; 144
 430:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 434:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 438:	10 92 a4 01 	sts	0x01A4, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 43c:	8c e0       	ldi	r24, 0x0C	; 12
 43e:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 442:	78 94       	sei
}
 444:	08 95       	ret

00000446 <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
 446:	80 91 a4 01 	lds	r24, 0x01A4
}
 44a:	08 95       	ret

0000044c <usb_debug_putchar>:
	return 0;
}

// transmit a character.  0 returned on success, -1 on error
int8_t usb_debug_putchar(uint8_t c)
{
 44c:	48 2f       	mov	r20, r24
	static uint8_t previous_timeout=0;
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 44e:	80 91 a4 01 	lds	r24, 0x01A4
 452:	88 23       	and	r24, r24
 454:	09 f4       	brne	.+2      	; 0x458 <usb_debug_putchar+0xc>
 456:	3e c0       	rjmp	.+124    	; 0x4d4 <usb_debug_putchar+0x88>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 458:	2f b7       	in	r18, 0x3f	; 63
	cli();
 45a:	f8 94       	cli
	UENUM = DEBUG_TX_ENDPOINT;
 45c:	84 e0       	ldi	r24, 0x04	; 4
 45e:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (previous_timeout) {
 462:	80 91 a8 01 	lds	r24, 0x01A8
 466:	88 23       	and	r24, r24
 468:	41 f0       	breq	.+16     	; 0x47a <usb_debug_putchar+0x2e>
		if (!(UEINTX & (1<<RWAL))) {
 46a:	80 91 e8 00 	lds	r24, 0x00E8
 46e:	85 fd       	sbrc	r24, 5
 470:	02 c0       	rjmp	.+4      	; 0x476 <usb_debug_putchar+0x2a>
			SREG = intr_state;
 472:	2f bf       	out	0x3f, r18	; 63
 474:	12 c0       	rjmp	.+36     	; 0x49a <usb_debug_putchar+0x4e>
			return -1;
		}
		previous_timeout = 0;
 476:	10 92 a8 01 	sts	0x01A8, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
 47a:	90 91 e4 00 	lds	r25, 0x00E4
 47e:	9c 5f       	subi	r25, 0xFC	; 252
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = DEBUG_TX_ENDPOINT;
 480:	34 e0       	ldi	r19, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 482:	80 91 e8 00 	lds	r24, 0x00E8
 486:	85 fd       	sbrc	r24, 5
 488:	13 c0       	rjmp	.+38     	; 0x4b0 <usb_debug_putchar+0x64>
		SREG = intr_state;
 48a:	2f bf       	out	0x3f, r18	; 63
		// have we waited too long?
		if (UDFNUML == timeout) {
 48c:	80 91 e4 00 	lds	r24, 0x00E4
 490:	89 17       	cp	r24, r25
 492:	29 f4       	brne	.+10     	; 0x49e <usb_debug_putchar+0x52>
			previous_timeout = 1;
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	80 93 a8 01 	sts	0x01A8, r24
 49a:	8f ef       	ldi	r24, 0xFF	; 255
 49c:	08 95       	ret
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 49e:	80 91 a4 01 	lds	r24, 0x01A4
 4a2:	88 23       	and	r24, r24
 4a4:	b9 f0       	breq	.+46     	; 0x4d4 <usb_debug_putchar+0x88>
		// get ready to try checking again
		intr_state = SREG;
 4a6:	2f b7       	in	r18, 0x3f	; 63
		cli();
 4a8:	f8 94       	cli
		UENUM = DEBUG_TX_ENDPOINT;
 4aa:	30 93 e9 00 	sts	0x00E9, r19
 4ae:	e9 cf       	rjmp	.-46     	; 0x482 <usb_debug_putchar+0x36>
	}
	// actually write the byte into the FIFO
	UEDATX = c;
 4b0:	40 93 f1 00 	sts	0x00F1, r20
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) {
 4b4:	80 91 e8 00 	lds	r24, 0x00E8
 4b8:	85 fd       	sbrc	r24, 5
 4ba:	06 c0       	rjmp	.+12     	; 0x4c8 <usb_debug_putchar+0x7c>
		UEINTX = 0x3A;
 4bc:	8a e3       	ldi	r24, 0x3A	; 58
 4be:	80 93 e8 00 	sts	0x00E8, r24
		debug_flush_timer = 0;
 4c2:	10 92 a6 01 	sts	0x01A6, r1
 4c6:	03 c0       	rjmp	.+6      	; 0x4ce <usb_debug_putchar+0x82>
	} else {
		debug_flush_timer = 2;
 4c8:	82 e0       	ldi	r24, 0x02	; 2
 4ca:	80 93 a6 01 	sts	0x01A6, r24
	}
	SREG = intr_state;
 4ce:	2f bf       	out	0x3f, r18	; 63
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	08 95       	ret
	return 0;
 4d4:	8f ef       	ldi	r24, 0xFF	; 255
}
 4d6:	08 95       	ret

000004d8 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 4d8:	1f 92       	push	r1
 4da:	0f 92       	push	r0
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	0f 92       	push	r0
 4e0:	11 24       	eor	r1, r1
 4e2:	2f 93       	push	r18
 4e4:	8f 93       	push	r24
 4e6:	9f 93       	push	r25
	uint8_t intbits, t, i;
	static uint8_t div4=0;

        intbits = UDINT;
 4e8:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 4ec:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 4f0:	98 2f       	mov	r25, r24
 4f2:	83 ff       	sbrs	r24, 3
 4f4:	0f c0       	rjmp	.+30     	; 0x514 <__vector_10+0x3c>
		UENUM = 0;
 4f6:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
 500:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 504:	82 e2       	ldi	r24, 0x22	; 34
 506:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
 50a:	88 e0       	ldi	r24, 0x08	; 8
 50c:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
 510:	10 92 a4 01 	sts	0x01A4, r1
        }
	if ((intbits & (1<<SOFI)) && usb_configuration) {
 514:	92 ff       	sbrs	r25, 2
 516:	5a c0       	rjmp	.+180    	; 0x5cc <__vector_10+0xf4>
 518:	80 91 a4 01 	lds	r24, 0x01A4
 51c:	88 23       	and	r24, r24
 51e:	09 f4       	brne	.+2      	; 0x522 <__vector_10+0x4a>
 520:	55 c0       	rjmp	.+170    	; 0x5cc <__vector_10+0xf4>
		t = debug_flush_timer;
 522:	80 91 a6 01 	lds	r24, 0x01A6
		if (t) {
 526:	88 23       	and	r24, r24
 528:	91 f0       	breq	.+36     	; 0x54e <__vector_10+0x76>
			debug_flush_timer = -- t;
 52a:	81 50       	subi	r24, 0x01	; 1
 52c:	80 93 a6 01 	sts	0x01A6, r24
			if (!t) {
 530:	88 23       	and	r24, r24
 532:	69 f4       	brne	.+26     	; 0x54e <__vector_10+0x76>
				UENUM = DEBUG_TX_ENDPOINT;
 534:	84 e0       	ldi	r24, 0x04	; 4
 536:	80 93 e9 00 	sts	0x00E9, r24
 53a:	02 c0       	rjmp	.+4      	; 0x540 <__vector_10+0x68>
				while ((UEINTX & (1<<RWAL))) {
					UEDATX = 0;
 53c:	10 92 f1 00 	sts	0x00F1, r1
		t = debug_flush_timer;
		if (t) {
			debug_flush_timer = -- t;
			if (!t) {
				UENUM = DEBUG_TX_ENDPOINT;
				while ((UEINTX & (1<<RWAL))) {
 540:	80 91 e8 00 	lds	r24, 0x00E8
 544:	85 fd       	sbrc	r24, 5
 546:	fa cf       	rjmp	.-12     	; 0x53c <__vector_10+0x64>
					UEDATX = 0;
				}
				UEINTX = 0x3A;
 548:	8a e3       	ldi	r24, 0x3A	; 58
 54a:	80 93 e8 00 	sts	0x00E8, r24
			}
		}
		if (keyboard_idle_config && (++div4 & 3) == 0) {
 54e:	20 91 99 01 	lds	r18, 0x0199
 552:	22 23       	and	r18, r18
 554:	d9 f1       	breq	.+118    	; 0x5cc <__vector_10+0xf4>
 556:	80 91 a7 01 	lds	r24, 0x01A7
 55a:	8f 5f       	subi	r24, 0xFF	; 255
 55c:	80 93 a7 01 	sts	0x01A7, r24
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	83 70       	andi	r24, 0x03	; 3
 564:	90 70       	andi	r25, 0x00	; 0
 566:	89 2b       	or	r24, r25
 568:	89 f5       	brne	.+98     	; 0x5cc <__vector_10+0xf4>
			UENUM = KEYBOARD_ENDPOINT;
 56a:	83 e0       	ldi	r24, 0x03	; 3
 56c:	80 93 e9 00 	sts	0x00E9, r24
			if (UEINTX & (1<<RWAL)) {
 570:	80 91 e8 00 	lds	r24, 0x00E8
 574:	85 ff       	sbrs	r24, 5
 576:	2a c0       	rjmp	.+84     	; 0x5cc <__vector_10+0xf4>
				keyboard_idle_count++;
 578:	80 91 a5 01 	lds	r24, 0x01A5
 57c:	8f 5f       	subi	r24, 0xFF	; 255
 57e:	80 93 a5 01 	sts	0x01A5, r24
				if (keyboard_idle_count == keyboard_idle_config) {
 582:	82 17       	cp	r24, r18
 584:	19 f5       	brne	.+70     	; 0x5cc <__vector_10+0xf4>
					keyboard_idle_count = 0;
 586:	10 92 a5 01 	sts	0x01A5, r1
					UEDATX = keyboard_modifier_keys;
 58a:	80 91 9c 01 	lds	r24, 0x019C
 58e:	80 93 f1 00 	sts	0x00F1, r24
					UEDATX = 0;
 592:	10 92 f1 00 	sts	0x00F1, r1
					for (i=0; i<6; i++) {
						UEDATX = keyboard_keys[i];
 596:	80 91 9d 01 	lds	r24, 0x019D
 59a:	80 93 f1 00 	sts	0x00F1, r24
 59e:	80 91 9e 01 	lds	r24, 0x019E
 5a2:	80 93 f1 00 	sts	0x00F1, r24
 5a6:	80 91 9f 01 	lds	r24, 0x019F
 5aa:	80 93 f1 00 	sts	0x00F1, r24
 5ae:	80 91 a0 01 	lds	r24, 0x01A0
 5b2:	80 93 f1 00 	sts	0x00F1, r24
 5b6:	80 91 a1 01 	lds	r24, 0x01A1
 5ba:	80 93 f1 00 	sts	0x00F1, r24
 5be:	80 91 a2 01 	lds	r24, 0x01A2
 5c2:	80 93 f1 00 	sts	0x00F1, r24
					}
					UEINTX = 0x3A;
 5c6:	8a e3       	ldi	r24, 0x3A	; 58
 5c8:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 5cc:	9f 91       	pop	r25
 5ce:	8f 91       	pop	r24
 5d0:	2f 91       	pop	r18
 5d2:	0f 90       	pop	r0
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	0f 90       	pop	r0
 5d8:	1f 90       	pop	r1
 5da:	18 95       	reti

000005dc <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 5dc:	1f 92       	push	r1
 5de:	0f 92       	push	r0
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	0f 92       	push	r0
 5e4:	11 24       	eor	r1, r1
 5e6:	2f 93       	push	r18
 5e8:	3f 93       	push	r19
 5ea:	4f 93       	push	r20
 5ec:	5f 93       	push	r21
 5ee:	6f 93       	push	r22
 5f0:	7f 93       	push	r23
 5f2:	8f 93       	push	r24
 5f4:	9f 93       	push	r25
 5f6:	af 93       	push	r26
 5f8:	bf 93       	push	r27
 5fa:	cf 93       	push	r28
 5fc:	df 93       	push	r29
 5fe:	ef 93       	push	r30
 600:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 602:	10 92 e9 00 	sts	0x00E9, r1
	intbits = UEINTX;
 606:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 60a:	83 ff       	sbrs	r24, 3
 60c:	86 c1       	rjmp	.+780    	; 0x91a <__vector_11+0x33e>
                bmRequestType = UEDATX;
 60e:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
 612:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
 616:	80 91 f1 00 	lds	r24, 0x00F1
 61a:	a8 2f       	mov	r26, r24
 61c:	b0 e0       	ldi	r27, 0x00	; 0
                wValue |= (UEDATX << 8);
 61e:	20 91 f1 00 	lds	r18, 0x00F1
 622:	92 2f       	mov	r25, r18
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	a8 2b       	or	r26, r24
 628:	b9 2b       	or	r27, r25
                wIndex = UEDATX;
 62a:	80 91 f1 00 	lds	r24, 0x00F1
 62e:	68 2f       	mov	r22, r24
 630:	70 e0       	ldi	r23, 0x00	; 0
                wIndex |= (UEDATX << 8);
 632:	20 91 f1 00 	lds	r18, 0x00F1
 636:	92 2f       	mov	r25, r18
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	68 2b       	or	r22, r24
 63c:	79 2b       	or	r23, r25
                wLength = UEDATX;
 63e:	80 91 f1 00 	lds	r24, 0x00F1
 642:	c8 2f       	mov	r28, r24
 644:	d0 e0       	ldi	r29, 0x00	; 0
                wLength |= (UEDATX << 8);
 646:	20 91 f1 00 	lds	r18, 0x00F1
 64a:	92 2f       	mov	r25, r18
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	c8 2b       	or	r28, r24
 650:	d9 2b       	or	r29, r25
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 652:	82 ef       	ldi	r24, 0xF2	; 242
 654:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
 658:	36 30       	cpi	r19, 0x06	; 6
 65a:	09 f0       	breq	.+2      	; 0x65e <__vector_11+0x82>
 65c:	56 c0       	rjmp	.+172    	; 0x70a <__vector_11+0x12e>
 65e:	2a ee       	ldi	r18, 0xEA	; 234
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	a9 01       	movw	r20, r18
 664:	45 50       	subi	r20, 0x05	; 5
 666:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
 668:	f9 01       	movw	r30, r18
 66a:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
 66c:	85 91       	lpm	r24, Z+
 66e:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
 670:	8a 17       	cp	r24, r26
 672:	9b 07       	cpc	r25, r27
 674:	e1 f4       	brne	.+56     	; 0x6ae <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 676:	fa 01       	movw	r30, r20
 678:	85 91       	lpm	r24, Z+
 67a:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
 67c:	86 17       	cp	r24, r22
 67e:	97 07       	cpc	r25, r23
 680:	b1 f4       	brne	.+44     	; 0x6ae <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 682:	9a 01       	movw	r18, r20
 684:	2e 5f       	subi	r18, 0xFE	; 254
 686:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
 688:	f9 01       	movw	r30, r18
 68a:	65 91       	lpm	r22, Z+
 68c:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
 68e:	2e 5f       	subi	r18, 0xFE	; 254
 690:	3f 4f       	sbci	r19, 0xFF	; 255
 692:	f9 01       	movw	r30, r18
 694:	24 91       	lpm	r18, Z+
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 696:	ce 01       	movw	r24, r28
 698:	cf 3f       	cpi	r28, 0xFF	; 255
 69a:	d1 05       	cpc	r29, r1
 69c:	19 f0       	breq	.+6      	; 0x6a4 <__vector_11+0xc8>
 69e:	10 f0       	brcs	.+4      	; 0x6a4 <__vector_11+0xc8>
 6a0:	8f ef       	ldi	r24, 0xFF	; 255
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	42 2f       	mov	r20, r18
 6a6:	82 17       	cp	r24, r18
 6a8:	58 f4       	brcc	.+22     	; 0x6c0 <__vector_11+0xe4>
 6aa:	48 2f       	mov	r20, r24
 6ac:	09 c0       	rjmp	.+18     	; 0x6c0 <__vector_11+0xe4>
 6ae:	29 5f       	subi	r18, 0xF9	; 249
 6b0:	3f 4f       	sbci	r19, 0xFF	; 255
 6b2:	49 5f       	subi	r20, 0xF9	; 249
 6b4:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 6b6:	f1 e0       	ldi	r31, 0x01	; 1
 6b8:	29 32       	cpi	r18, 0x29	; 41
 6ba:	3f 07       	cpc	r19, r31
 6bc:	a9 f6       	brne	.-86     	; 0x668 <__vector_11+0x8c>
 6be:	2d c1       	rjmp	.+602    	; 0x91a <__vector_11+0x33e>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6c0:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 6c2:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 6c6:	28 2f       	mov	r18, r24
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	c9 01       	movw	r24, r18
 6cc:	85 70       	andi	r24, 0x05	; 5
 6ce:	90 70       	andi	r25, 0x00	; 0
 6d0:	89 2b       	or	r24, r25
 6d2:	b9 f3       	breq	.-18     	; 0x6c2 <__vector_11+0xe6>
				if (i & (1<<RXOUTI)) return;	// abort
 6d4:	22 fd       	sbrc	r18, 2
 6d6:	24 c1       	rjmp	.+584    	; 0x920 <__vector_11+0x344>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 6d8:	34 2f       	mov	r19, r20
 6da:	41 32       	cpi	r20, 0x21	; 33
 6dc:	08 f0       	brcs	.+2      	; 0x6e0 <__vector_11+0x104>
 6de:	30 e2       	ldi	r19, 0x20	; 32
 6e0:	23 2f       	mov	r18, r19
 6e2:	cb 01       	movw	r24, r22
 6e4:	06 c0       	rjmp	.+12     	; 0x6f2 <__vector_11+0x116>
				for (i = n; i; i--) {
 6e6:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
 6e8:	01 96       	adiw	r24, 0x01	; 1
 6ea:	e4 91       	lpm	r30, Z+
 6ec:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 6f0:	21 50       	subi	r18, 0x01	; 1
 6f2:	22 23       	and	r18, r18
 6f4:	c1 f7       	brne	.-16     	; 0x6e6 <__vector_11+0x10a>
 6f6:	63 0f       	add	r22, r19
 6f8:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 6fa:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6fc:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 700:	44 23       	and	r20, r20
 702:	f9 f6       	brne	.-66     	; 0x6c2 <__vector_11+0xe6>
 704:	30 32       	cpi	r19, 0x20	; 32
 706:	e9 f2       	breq	.-70     	; 0x6c2 <__vector_11+0xe6>
 708:	0b c1       	rjmp	.+534    	; 0x920 <__vector_11+0x344>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 70a:	35 30       	cpi	r19, 0x05	; 5
 70c:	61 f4       	brne	.+24     	; 0x726 <__vector_11+0x14a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 70e:	8e ef       	ldi	r24, 0xFE	; 254
 710:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 714:	80 91 e8 00 	lds	r24, 0x00E8
 718:	80 ff       	sbrs	r24, 0
 71a:	fc cf       	rjmp	.-8      	; 0x714 <__vector_11+0x138>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 71c:	8a 2f       	mov	r24, r26
 71e:	80 68       	ori	r24, 0x80	; 128
 720:	80 93 e3 00 	sts	0x00E3, r24
 724:	fd c0       	rjmp	.+506    	; 0x920 <__vector_11+0x344>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 726:	39 30       	cpi	r19, 0x09	; 9
 728:	31 f5       	brne	.+76     	; 0x776 <__vector_11+0x19a>
 72a:	44 23       	and	r20, r20
 72c:	09 f0       	breq	.+2      	; 0x730 <__vector_11+0x154>
 72e:	70 c0       	rjmp	.+224    	; 0x810 <__vector_11+0x234>
			usb_configuration = wValue;
 730:	a0 93 a4 01 	sts	0x01A4, r26
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 734:	8e ef       	ldi	r24, 0xFE	; 254
 736:	80 93 e8 00 	sts	0x00E8, r24
 73a:	82 e2       	ldi	r24, 0x22	; 34
 73c:	91 e0       	ldi	r25, 0x01	; 1
 73e:	21 e0       	ldi	r18, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 740:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
 744:	fc 01       	movw	r30, r24
 746:	01 96       	adiw	r24, 0x01	; 1
 748:	e4 91       	lpm	r30, Z+
				UECONX = en;
 74a:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
 74e:	ee 23       	and	r30, r30
 750:	69 f0       	breq	.+26     	; 0x76c <__vector_11+0x190>
					UECFG0X = pgm_read_byte(cfg++);
 752:	ac 01       	movw	r20, r24
 754:	4f 5f       	subi	r20, 0xFF	; 255
 756:	5f 4f       	sbci	r21, 0xFF	; 255
 758:	fc 01       	movw	r30, r24
 75a:	84 91       	lpm	r24, Z+
 75c:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
 760:	ca 01       	movw	r24, r20
 762:	01 96       	adiw	r24, 0x01	; 1
 764:	fa 01       	movw	r30, r20
 766:	34 91       	lpm	r19, Z+
 768:	30 93 ed 00 	sts	0x00ED, r19
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 76c:	2f 5f       	subi	r18, 0xFF	; 255
 76e:	25 30       	cpi	r18, 0x05	; 5
 770:	39 f7       	brne	.-50     	; 0x740 <__vector_11+0x164>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 772:	8e e1       	ldi	r24, 0x1E	; 30
 774:	48 c0       	rjmp	.+144    	; 0x806 <__vector_11+0x22a>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 776:	38 30       	cpi	r19, 0x08	; 8
 778:	51 f4       	brne	.+20     	; 0x78e <__vector_11+0x1b2>
 77a:	40 38       	cpi	r20, 0x80	; 128
 77c:	09 f0       	breq	.+2      	; 0x780 <__vector_11+0x1a4>
 77e:	48 c0       	rjmp	.+144    	; 0x810 <__vector_11+0x234>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 780:	80 91 e8 00 	lds	r24, 0x00E8
 784:	80 ff       	sbrs	r24, 0
 786:	fc cf       	rjmp	.-8      	; 0x780 <__vector_11+0x1a4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 788:	80 91 a4 01 	lds	r24, 0x01A4
 78c:	7c c0       	rjmp	.+248    	; 0x886 <__vector_11+0x2aa>
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
 78e:	33 23       	and	r19, r19
 790:	d1 f4       	brne	.+52     	; 0x7c6 <__vector_11+0x1ea>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 792:	80 91 e8 00 	lds	r24, 0x00E8
 796:	80 ff       	sbrs	r24, 0
 798:	fc cf       	rjmp	.-8      	; 0x792 <__vector_11+0x1b6>

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 79a:	42 38       	cpi	r20, 0x82	; 130
 79c:	11 f0       	breq	.+4      	; 0x7a2 <__vector_11+0x1c6>
 79e:	80 e0       	ldi	r24, 0x00	; 0
 7a0:	0d c0       	rjmp	.+26     	; 0x7bc <__vector_11+0x1e0>
				UENUM = wIndex;
 7a2:	60 93 e9 00 	sts	0x00E9, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
 7a6:	80 91 eb 00 	lds	r24, 0x00EB
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	25 e0       	ldi	r18, 0x05	; 5
 7ae:	96 95       	lsr	r25
 7b0:	87 95       	ror	r24
 7b2:	2a 95       	dec	r18
 7b4:	e1 f7       	brne	.-8      	; 0x7ae <__vector_11+0x1d2>
 7b6:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
 7b8:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
 7bc:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
 7c0:	10 92 f1 00 	sts	0x00F1, r1
 7c4:	7f c0       	rjmp	.+254    	; 0x8c4 <__vector_11+0x2e8>
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 7c6:	31 30       	cpi	r19, 0x01	; 1
 7c8:	11 f0       	breq	.+4      	; 0x7ce <__vector_11+0x1f2>
 7ca:	33 30       	cpi	r19, 0x03	; 3
 7cc:	09 f5       	brne	.+66     	; 0x810 <__vector_11+0x234>
 7ce:	42 30       	cpi	r20, 0x02	; 2
 7d0:	f9 f4       	brne	.+62     	; 0x810 <__vector_11+0x234>
 7d2:	10 97       	sbiw	r26, 0x00	; 0
 7d4:	e9 f4       	brne	.+58     	; 0x810 <__vector_11+0x234>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
 7d6:	26 2f       	mov	r18, r22
 7d8:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 7da:	82 2f       	mov	r24, r18
 7dc:	81 50       	subi	r24, 0x01	; 1
 7de:	84 30       	cpi	r24, 0x04	; 4
 7e0:	b8 f4       	brcc	.+46     	; 0x810 <__vector_11+0x234>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7e2:	8e ef       	ldi	r24, 0xFE	; 254
 7e4:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 7e8:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
 7ec:	33 30       	cpi	r19, 0x03	; 3
 7ee:	09 f4       	brne	.+2      	; 0x7f2 <__vector_11+0x216>
 7f0:	94 c0       	rjmp	.+296    	; 0x91a <__vector_11+0x33e>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 7f2:	89 e1       	ldi	r24, 0x19	; 25
 7f4:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <__vector_11+0x226>
 7fe:	88 0f       	add	r24, r24
 800:	99 1f       	adc	r25, r25
 802:	2a 95       	dec	r18
 804:	e2 f7       	brpl	.-8      	; 0x7fe <__vector_11+0x222>
 806:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
 80a:	10 92 ea 00 	sts	0x00EA, r1
 80e:	88 c0       	rjmp	.+272    	; 0x920 <__vector_11+0x344>
				}
				return;
			}
		}
		#endif
		if (wIndex == KEYBOARD_INTERFACE) {
 810:	61 15       	cp	r22, r1
 812:	71 05       	cpc	r23, r1
 814:	09 f0       	breq	.+2      	; 0x818 <__vector_11+0x23c>
 816:	5a c0       	rjmp	.+180    	; 0x8cc <__vector_11+0x2f0>
			if (bmRequestType == 0xA1) {
 818:	41 3a       	cpi	r20, 0xA1	; 161
 81a:	c1 f5       	brne	.+112    	; 0x88c <__vector_11+0x2b0>
				if (bRequest == HID_GET_REPORT) {
 81c:	31 30       	cpi	r19, 0x01	; 1
 81e:	09 f5       	brne	.+66     	; 0x862 <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 820:	80 91 e8 00 	lds	r24, 0x00E8
 824:	80 ff       	sbrs	r24, 0
 826:	fc cf       	rjmp	.-8      	; 0x820 <__vector_11+0x244>
		#endif
		if (wIndex == KEYBOARD_INTERFACE) {
			if (bmRequestType == 0xA1) {
				if (bRequest == HID_GET_REPORT) {
					usb_wait_in_ready();
					UEDATX = keyboard_modifier_keys;
 828:	80 91 9c 01 	lds	r24, 0x019C
 82c:	80 93 f1 00 	sts	0x00F1, r24
					UEDATX = 0;
 830:	10 92 f1 00 	sts	0x00F1, r1
					for (i=0; i<6; i++) {
						UEDATX = keyboard_keys[i];
 834:	80 91 9d 01 	lds	r24, 0x019D
 838:	80 93 f1 00 	sts	0x00F1, r24
 83c:	80 91 9e 01 	lds	r24, 0x019E
 840:	80 93 f1 00 	sts	0x00F1, r24
 844:	80 91 9f 01 	lds	r24, 0x019F
 848:	80 93 f1 00 	sts	0x00F1, r24
 84c:	80 91 a0 01 	lds	r24, 0x01A0
 850:	80 93 f1 00 	sts	0x00F1, r24
 854:	80 91 a1 01 	lds	r24, 0x01A1
 858:	80 93 f1 00 	sts	0x00F1, r24
 85c:	80 91 a2 01 	lds	r24, 0x01A2
 860:	12 c0       	rjmp	.+36     	; 0x886 <__vector_11+0x2aa>
					}
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_IDLE) {
 862:	32 30       	cpi	r19, 0x02	; 2
 864:	39 f4       	brne	.+14     	; 0x874 <__vector_11+0x298>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 866:	80 91 e8 00 	lds	r24, 0x00E8
 86a:	80 ff       	sbrs	r24, 0
 86c:	fc cf       	rjmp	.-8      	; 0x866 <__vector_11+0x28a>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_IDLE) {
					usb_wait_in_ready();
					UEDATX = keyboard_idle_config;
 86e:	80 91 99 01 	lds	r24, 0x0199
 872:	09 c0       	rjmp	.+18     	; 0x886 <__vector_11+0x2aa>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_PROTOCOL) {
 874:	33 30       	cpi	r19, 0x03	; 3
 876:	09 f0       	breq	.+2      	; 0x87a <__vector_11+0x29e>
 878:	50 c0       	rjmp	.+160    	; 0x91a <__vector_11+0x33e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 87a:	80 91 e8 00 	lds	r24, 0x00E8
 87e:	80 ff       	sbrs	r24, 0
 880:	fc cf       	rjmp	.-8      	; 0x87a <__vector_11+0x29e>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_PROTOCOL) {
					usb_wait_in_ready();
					UEDATX = keyboard_protocol;
 882:	80 91 9a 01 	lds	r24, 0x019A
 886:	80 93 f1 00 	sts	0x00F1, r24
 88a:	1c c0       	rjmp	.+56     	; 0x8c4 <__vector_11+0x2e8>
					usb_send_in();
					return;
				}
			}
			if (bmRequestType == 0x21) {
 88c:	41 32       	cpi	r20, 0x21	; 33
 88e:	09 f0       	breq	.+2      	; 0x892 <__vector_11+0x2b6>
 890:	44 c0       	rjmp	.+136    	; 0x91a <__vector_11+0x33e>
				if (bRequest == HID_SET_REPORT) {
 892:	39 30       	cpi	r19, 0x09	; 9
 894:	61 f4       	brne	.+24     	; 0x8ae <__vector_11+0x2d2>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 896:	80 91 e8 00 	lds	r24, 0x00E8
 89a:	82 ff       	sbrs	r24, 2
 89c:	fc cf       	rjmp	.-8      	; 0x896 <__vector_11+0x2ba>
				}
			}
			if (bmRequestType == 0x21) {
				if (bRequest == HID_SET_REPORT) {
					usb_wait_receive_out();
					keyboard_leds = UEDATX;
 89e:	80 91 f1 00 	lds	r24, 0x00F1
 8a2:	80 93 a3 01 	sts	0x01A3, r24
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 8a6:	8b ef       	ldi	r24, 0xFB	; 251
 8a8:	80 93 e8 00 	sts	0x00E8, r24
 8ac:	0b c0       	rjmp	.+22     	; 0x8c4 <__vector_11+0x2e8>
					keyboard_leds = UEDATX;
					usb_ack_out();
					usb_send_in();
					return;
				}
				if (bRequest == HID_SET_IDLE) {
 8ae:	3a 30       	cpi	r19, 0x0A	; 10
 8b0:	29 f4       	brne	.+10     	; 0x8bc <__vector_11+0x2e0>
					keyboard_idle_config = (wValue >> 8);
 8b2:	b0 93 99 01 	sts	0x0199, r27
					keyboard_idle_count = 0;
 8b6:	10 92 a5 01 	sts	0x01A5, r1
 8ba:	04 c0       	rjmp	.+8      	; 0x8c4 <__vector_11+0x2e8>
					//usb_wait_in_ready();
					usb_send_in();
					return;
				}
				if (bRequest == HID_SET_PROTOCOL) {
 8bc:	3b 30       	cpi	r19, 0x0B	; 11
 8be:	69 f5       	brne	.+90     	; 0x91a <__vector_11+0x33e>
					keyboard_protocol = wValue;
 8c0:	a0 93 9a 01 	sts	0x019A, r26
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 8c4:	8e ef       	ldi	r24, 0xFE	; 254
 8c6:	80 93 e8 00 	sts	0x00E8, r24
 8ca:	2a c0       	rjmp	.+84     	; 0x920 <__vector_11+0x344>
					usb_send_in();
					return;
				}
			}
		}
		if (wIndex == DEBUG_INTERFACE) {
 8cc:	61 30       	cpi	r22, 0x01	; 1
 8ce:	71 05       	cpc	r23, r1
 8d0:	21 f5       	brne	.+72     	; 0x91a <__vector_11+0x33e>
			if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
 8d2:	31 30       	cpi	r19, 0x01	; 1
 8d4:	11 f5       	brne	.+68     	; 0x91a <__vector_11+0x33e>
 8d6:	41 3a       	cpi	r20, 0xA1	; 161
 8d8:	01 f5       	brne	.+64     	; 0x91a <__vector_11+0x33e>
				len = wLength;
 8da:	4c 2f       	mov	r20, r28
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 8dc:	5e ef       	ldi	r21, 0xFE	; 254
			if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
				len = wLength;
				do {
					// wait for host ready for IN packet
					do {
						i = UEINTX;
 8de:	80 91 e8 00 	lds	r24, 0x00E8
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 8e2:	28 2f       	mov	r18, r24
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	c9 01       	movw	r24, r18
 8e8:	85 70       	andi	r24, 0x05	; 5
 8ea:	90 70       	andi	r25, 0x00	; 0
 8ec:	89 2b       	or	r24, r25
 8ee:	b9 f3       	breq	.-18     	; 0x8de <__vector_11+0x302>
					if (i & (1<<RXOUTI)) return;	// abort
 8f0:	22 fd       	sbrc	r18, 2
 8f2:	16 c0       	rjmp	.+44     	; 0x920 <__vector_11+0x344>
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 8f4:	94 2f       	mov	r25, r20
 8f6:	41 32       	cpi	r20, 0x21	; 33
 8f8:	08 f0       	brcs	.+2      	; 0x8fc <__vector_11+0x320>
 8fa:	90 e2       	ldi	r25, 0x20	; 32
 8fc:	89 2f       	mov	r24, r25
 8fe:	03 c0       	rjmp	.+6      	; 0x906 <__vector_11+0x32a>
					for (i = n; i; i--) {
						UEDATX = 0;
 900:	10 92 f1 00 	sts	0x00F1, r1
						i = UEINTX;
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
					if (i & (1<<RXOUTI)) return;	// abort
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
					for (i = n; i; i--) {
 904:	81 50       	subi	r24, 0x01	; 1
 906:	88 23       	and	r24, r24
 908:	d9 f7       	brne	.-10     	; 0x900 <__vector_11+0x324>
						UEDATX = 0;
					}
					len -= n;
 90a:	49 1b       	sub	r20, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 90c:	50 93 e8 00 	sts	0x00E8, r21
					for (i = n; i; i--) {
						UEDATX = 0;
					}
					len -= n;
					usb_send_in();
				} while (len || n == ENDPOINT0_SIZE);
 910:	44 23       	and	r20, r20
 912:	29 f7       	brne	.-54     	; 0x8de <__vector_11+0x302>
 914:	90 32       	cpi	r25, 0x20	; 32
 916:	19 f3       	breq	.-58     	; 0x8de <__vector_11+0x302>
 918:	03 c0       	rjmp	.+6      	; 0x920 <__vector_11+0x344>
				return;
			}
		}
	}
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 91a:	81 e2       	ldi	r24, 0x21	; 33
 91c:	80 93 eb 00 	sts	0x00EB, r24
}
 920:	ff 91       	pop	r31
 922:	ef 91       	pop	r30
 924:	df 91       	pop	r29
 926:	cf 91       	pop	r28
 928:	bf 91       	pop	r27
 92a:	af 91       	pop	r26
 92c:	9f 91       	pop	r25
 92e:	8f 91       	pop	r24
 930:	7f 91       	pop	r23
 932:	6f 91       	pop	r22
 934:	5f 91       	pop	r21
 936:	4f 91       	pop	r20
 938:	3f 91       	pop	r19
 93a:	2f 91       	pop	r18
 93c:	0f 90       	pop	r0
 93e:	0f be       	out	0x3f, r0	; 63
 940:	0f 90       	pop	r0
 942:	1f 90       	pop	r1
 944:	18 95       	reti

00000946 <print_P>:
#include <avr/pgmspace.h>

#include "print.h"

void print_P(const char *s)
{
 946:	1f 93       	push	r17
 948:	cf 93       	push	r28
 94a:	df 93       	push	r29
 94c:	ec 01       	movw	r28, r24
 94e:	fe 01       	movw	r30, r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
 950:	21 96       	adiw	r28, 0x01	; 1
 952:	14 91       	lpm	r17, Z+
		if (!c) break;
 954:	11 23       	and	r17, r17
 956:	39 f0       	breq	.+14     	; 0x966 <print_P+0x20>
		if (c == '\n') usb_debug_putchar('\r');
 958:	1a 30       	cpi	r17, 0x0A	; 10
 95a:	11 f4       	brne	.+4      	; 0x960 <print_P+0x1a>
 95c:	8d e0       	ldi	r24, 0x0D	; 13
 95e:	76 dd       	rcall	.-1300   	; 0x44c <usb_debug_putchar>
		usb_debug_putchar(c);
 960:	81 2f       	mov	r24, r17
 962:	74 dd       	rcall	.-1304   	; 0x44c <usb_debug_putchar>
 964:	f4 cf       	rjmp	.-24     	; 0x94e <print_P+0x8>
	}
}
 966:	df 91       	pop	r29
 968:	cf 91       	pop	r28
 96a:	1f 91       	pop	r17
 96c:	08 95       	ret

0000096e <_exit>:
 96e:	f8 94       	cli

00000970 <__stop_program>:
 970:	ff cf       	rjmp	.-2      	; 0x970 <__stop_program>
