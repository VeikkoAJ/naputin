
naputin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800100  00000bae  00000c42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080018a  0080018a  00000ccc  2**0
                  ALLOC
  3 .debug_aranges 000000b0  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000015e  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c3f  00000000  00000000  00000eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003de  00000000  00000000  00001b19  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ccb  00000000  00000000  00001ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00002bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003df  00000000  00000000  00002cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000076f  00000000  00000000  000030a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00003812  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return usb_keyboard_send();
}

// send the contents of keyboard_keys and keyboard_modifier_keys
int8_t usb_keyboard_send(void)
{
   0:	fc c0       	rjmp	.+504    	; 0x1fa <__ctors_end>
	phex1(c >> 4);
	phex1(c & 15);
}

void phex16(unsigned int i)
{
   2:	00 00       	nop
   4:	15 c1       	rjmp	.+554    	; 0x230 <__bad_interrupt>
   6:	00 00       	nop
   8:	13 c1       	rjmp	.+550    	; 0x230 <__bad_interrupt>
   a:	00 00       	nop
   c:	11 c1       	rjmp	.+546    	; 0x230 <__bad_interrupt>
   e:	00 00       	nop
  10:	0f c1       	rjmp	.+542    	; 0x230 <__bad_interrupt>
  12:	00 00       	nop
  14:	0d c1       	rjmp	.+538    	; 0x230 <__bad_interrupt>
  16:	00 00       	nop
  18:	0b c1       	rjmp	.+534    	; 0x230 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	09 c1       	rjmp	.+530    	; 0x230 <__bad_interrupt>
  1e:	00 00       	nop
  20:	07 c1       	rjmp	.+526    	; 0x230 <__bad_interrupt>
  22:	00 00       	nop
  24:	05 c1       	rjmp	.+522    	; 0x230 <__bad_interrupt>
  26:	00 00       	nop
  28:	63 c3       	rjmp	.+1734   	; 0x6f0 <__vector_10>
  2a:	00 00       	nop
  2c:	e3 c3       	rjmp	.+1990   	; 0x7f4 <__vector_11>
  2e:	00 00       	nop
  30:	ff c0       	rjmp	.+510    	; 0x230 <__bad_interrupt>
  32:	00 00       	nop
  34:	fd c0       	rjmp	.+506    	; 0x230 <__bad_interrupt>
  36:	00 00       	nop
  38:	fb c0       	rjmp	.+502    	; 0x230 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f9 c0       	rjmp	.+498    	; 0x230 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f7 c0       	rjmp	.+494    	; 0x230 <__bad_interrupt>
  42:	00 00       	nop
  44:	f5 c0       	rjmp	.+490    	; 0x230 <__bad_interrupt>
  46:	00 00       	nop
  48:	f3 c0       	rjmp	.+486    	; 0x230 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f1 c0       	rjmp	.+482    	; 0x230 <__bad_interrupt>
  4e:	00 00       	nop
  50:	ef c0       	rjmp	.+478    	; 0x230 <__bad_interrupt>
  52:	00 00       	nop
  54:	ed c0       	rjmp	.+474    	; 0x230 <__bad_interrupt>
  56:	00 00       	nop
  58:	eb c0       	rjmp	.+470    	; 0x230 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e9 c0       	rjmp	.+466    	; 0x230 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e7 c0       	rjmp	.+462    	; 0x230 <__bad_interrupt>
  62:	00 00       	nop
  64:	e5 c0       	rjmp	.+458    	; 0x230 <__bad_interrupt>
  66:	00 00       	nop
  68:	e3 c0       	rjmp	.+454    	; 0x230 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e1 c0       	rjmp	.+450    	; 0x230 <__bad_interrupt>
  6e:	00 00       	nop
  70:	df c0       	rjmp	.+446    	; 0x230 <__bad_interrupt>
  72:	00 00       	nop
  74:	dd c0       	rjmp	.+442    	; 0x230 <__bad_interrupt>
  76:	00 00       	nop
  78:	db c0       	rjmp	.+438    	; 0x230 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d9 c0       	rjmp	.+434    	; 0x230 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d7 c0       	rjmp	.+430    	; 0x230 <__bad_interrupt>
  82:	00 00       	nop
  84:	d5 c0       	rjmp	.+426    	; 0x230 <__bad_interrupt>
  86:	00 00       	nop
  88:	d3 c0       	rjmp	.+422    	; 0x230 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d1 c0       	rjmp	.+418    	; 0x230 <__bad_interrupt>
  8e:	00 00       	nop
  90:	cf c0       	rjmp	.+414    	; 0x230 <__bad_interrupt>
  92:	00 00       	nop
  94:	cd c0       	rjmp	.+410    	; 0x230 <__bad_interrupt>
  96:	00 00       	nop
  98:	cb c0       	rjmp	.+406    	; 0x230 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c9 c0       	rjmp	.+402    	; 0x230 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c7 c0       	rjmp	.+398    	; 0x230 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c5 c0       	rjmp	.+394    	; 0x230 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c3 c0       	rjmp	.+390    	; 0x230 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__c.1414>:
  ac:	2c 20 00                                            , .

000000af <__c.1412>:
  af:	0a 6b 65 79 73 3a 0a 00                             .keys:..

000000b7 <__c.1410>:
  b7:	0a 6d 6f 64 69 66 69 65 72 73 3a 20 00              .modifiers: .

000000c4 <__c.1396>:
  c4:	0a 6d 61 69 6e 20 6c 6f 6f 70 20 73 74 61 72 74     .main loop start
  d4:	65 64 0a 00                                         ed..

000000d8 <__c.1391>:
  d8:	75 73 62 20 63 6f 6e 66 69 67 75 72 65 64 0a 00     usb configured..

000000e8 <descriptor_list>:
  e8:	00 01 00 00 2f 01 12 00 02 00 00 41 01 3b 00 22     ..../......A.;."
  f8:	00 00 7c 01 3f 00 21 00 00 53 01 09 00 22 01 00     ..|.?.!..S..."..
 108:	bb 01 15 00 21 01 00 6c 01 09 00 03 00 00 d0 01     ....!..l........
 118:	04 01 03 09 04 d4 01 10 02 03 09 04 e6 01 12        ...............

00000127 <endpoint_config_table>:
 127:	00 00 01 c1 06 01 c1 26                             .......&

0000012f <device_descriptor>:
 12f:	12 01 00 02 00 00 00 20 c0 16 7d 04 00 01 01 02     ....... ..}.....
 13f:	00 01                                               ..

00000141 <config1_descriptor>:
 141:	09 02 3b 00 02 01 00 c0 32 09 04 00 00 01 03 01     ..;.....2.......
 151:	01 00 09 21 11 01 00 01 22 3f 00 07 05 83 03 08     ...!...."?......
 161:	00 01 09 04 01 00 01 03 00 00 00 09 21 11 01 00     ............!...
 171:	01 22 15 00 07 05 84 03 20 00 01                    ."...... ..

0000017c <keyboard_hid_report_desc>:
 17c:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
 18c:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
 19c:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
 1ac:	75 08 15 00 25 68 05 07 19 00 29 68 81 00 c0        u...%h....)h...

000001bb <debug_hid_report_desc>:
 1bb:	06 31 ff 09 74 a1 53 75 08 15 00 26 ff 00 95 20     .1..t.Su...&... 
 1cb:	09 75 81 02 c0                                      .u...

000001d0 <string0>:
 1d0:	04 03 09 04                                         ....

000001d4 <string1>:
 1d4:	10 03 4d 00 66 00 67 00 4e 00 61 00 6d 00 65 00     ..M.f.g.N.a.m.e.
 1e4:	00 00                                               ..

000001e6 <string2>:
 1e6:	12 03 4b 00 65 00 79 00 62 00 6f 00 61 00 72 00     ..K.e.y.b.o.a.r.
 1f6:	64 00 00 00                                         d...

000001fa <__ctors_end>:
 1fa:	11 24       	eor	r1, r1
 1fc:	1f be       	out	0x3f, r1	; 63
 1fe:	cf ef       	ldi	r28, 0xFF	; 255
 200:	da e0       	ldi	r29, 0x0A	; 10
 202:	de bf       	out	0x3e, r29	; 62
 204:	cd bf       	out	0x3d, r28	; 61

00000206 <__do_copy_data>:
 206:	11 e0       	ldi	r17, 0x01	; 1
 208:	a0 e0       	ldi	r26, 0x00	; 0
 20a:	b1 e0       	ldi	r27, 0x01	; 1
 20c:	ee ea       	ldi	r30, 0xAE	; 174
 20e:	fb e0       	ldi	r31, 0x0B	; 11
 210:	02 c0       	rjmp	.+4      	; 0x216 <.do_copy_data_start>

00000212 <.do_copy_data_loop>:
 212:	05 90       	lpm	r0, Z+
 214:	0d 92       	st	X+, r0

00000216 <.do_copy_data_start>:
 216:	aa 38       	cpi	r26, 0x8A	; 138
 218:	b1 07       	cpc	r27, r17
 21a:	d9 f7       	brne	.-10     	; 0x212 <.do_copy_data_loop>

0000021c <__do_clear_bss>:
 21c:	11 e0       	ldi	r17, 0x01	; 1
 21e:	aa e8       	ldi	r26, 0x8A	; 138
 220:	b1 e0       	ldi	r27, 0x01	; 1
 222:	01 c0       	rjmp	.+2      	; 0x226 <.do_clear_bss_start>

00000224 <.do_clear_bss_loop>:
 224:	1d 92       	st	X+, r1

00000226 <.do_clear_bss_start>:
 226:	a7 39       	cpi	r26, 0x97	; 151
 228:	b1 07       	cpc	r27, r17
 22a:	e1 f7       	brne	.-8      	; 0x224 <.do_clear_bss_loop>
 22c:	02 d0       	rcall	.+4      	; 0x232 <main>
 22e:	bd c4       	rjmp	.+2426   	; 0xbaa <_exit>

00000230 <__bad_interrupt>:
 230:	e7 ce       	rjmp	.-562    	; 0x0 <__vectors>

00000232 <main>:
#define CPU_PRESCALE(n) (CLKPR = 0x80, CLKPR = (n))

uint16_t idle_count = 0;

int main(void)
{
 232:	2f 92       	push	r2
 234:	3f 92       	push	r3
 236:	4f 92       	push	r4
 238:	5f 92       	push	r5
 23a:	6f 92       	push	r6
 23c:	7f 92       	push	r7
 23e:	8f 92       	push	r8
 240:	9f 92       	push	r9
 242:	af 92       	push	r10
 244:	bf 92       	push	r11
 246:	cf 92       	push	r12
 248:	df 92       	push	r13
 24a:	ef 92       	push	r14
 24c:	ff 92       	push	r15
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	df 93       	push	r29
 254:	cf 93       	push	r28
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
 25a:	e0 97       	sbiw	r28, 0x30	; 48
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	f8 94       	cli
 260:	de bf       	out	0x3e, r29	; 62
 262:	0f be       	out	0x3f, r0	; 63
 264:	cd bf       	out	0x3d, r28	; 61
        7,
        6,
        3,
        2};

    CPU_PRESCALE(0);
 266:	80 e8       	ldi	r24, 0x80	; 128
 268:	80 93 61 00 	sts	0x0061, r24
 26c:	10 92 61 00 	sts	0x0061, r1

    // configure pins as inputs and outputs

    usb_init();
 270:	df d1       	rcall	.+958    	; 0x630 <usb_init>
    while (!usb_configured()) /* wait */
 272:	f5 d1       	rcall	.+1002   	; 0x65e <usb_configured>
 274:	88 23       	and	r24, r24
 276:	e9 f3       	breq	.-6      	; 0x272 <main+0x40>
        ;
    print("usb configured\n");
 278:	88 ed       	ldi	r24, 0xD8	; 216
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	82 d4       	rcall	.+2308   	; 0xb82 <print_P>
 27e:	80 e1       	ldi	r24, 0x10	; 16
 280:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 282:	20 e9       	ldi	r18, 0x90	; 144
 284:	31 e0       	ldi	r19, 0x01	; 1
 286:	f9 01       	movw	r30, r18
 288:	31 97       	sbiw	r30, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <main+0x56>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 28c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 28e:	d9 f7       	brne	.-10     	; 0x286 <main+0x54>
uint16_t idle_count = 0;

int main(void)
{
    uint8_t reset_idle;
    uint16_t state[6] = {0};
 290:	4c e0       	ldi	r20, 0x0C	; 12
 292:	fe 01       	movw	r30, r28
 294:	31 96       	adiw	r30, 0x01	; 1
 296:	df 01       	movw	r26, r30
 298:	24 2f       	mov	r18, r20
 29a:	1d 92       	st	X+, r1
 29c:	2a 95       	dec	r18
 29e:	e9 f7       	brne	.-6      	; 0x29a <main+0x68>
    uint16_t state_prev[6] = {16};
 2a0:	9e 01       	movw	r18, r28
 2a2:	23 5f       	subi	r18, 0xF3	; 243
 2a4:	3f 4f       	sbci	r19, 0xFF	; 255
 2a6:	d9 01       	movw	r26, r18
 2a8:	84 2f       	mov	r24, r20
 2aa:	1d 92       	st	X+, r1
 2ac:	8a 95       	dec	r24
 2ae:	e9 f7       	brne	.-6      	; 0x2aa <main+0x78>
 2b0:	80 e1       	ldi	r24, 0x10	; 16
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	9e 87       	std	Y+14, r25	; 0x0e
 2b6:	8d 87       	std	Y+13, r24	; 0x0d
    uint16_t sum[6] = {0};
 2b8:	be 01       	movw	r22, r28
 2ba:	67 5e       	subi	r22, 0xE7	; 231
 2bc:	7f 4f       	sbci	r23, 0xFF	; 255
 2be:	db 01       	movw	r26, r22
 2c0:	1d 92       	st	X+, r1
 2c2:	4a 95       	dec	r20
 2c4:	e9 f7       	brne	.-6      	; 0x2c0 <main+0x8e>
        ;
    print("usb configured\n");

    _delay_ms(1000);

    TCCR0A = 0x00;
 2c6:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x05;
 2c8:	85 e0       	ldi	r24, 0x05	; 5
 2ca:	85 bd       	out	0x25, r24	; 37
    TIMSK0 = (1 << TOIE0);
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 93 6e 00 	sts	0x006E, r24
        DDRD = 0xCC; // 0, 1, inputs 2, 3, 4, 5 outputs

        // read all ports
        for (b = 0; b < 15; b++)
        {
            *(columns[b]) = *(columns[b]) | (0x01 << columnShift[b]);
 2d2:	11 e0       	ldi	r17, 0x01	; 1
 2d4:	61 2e       	mov	r6, r17
 2d6:	71 2c       	mov	r7, r1
                }
                else if (b == 8 && i == 5&& (state[i] >> b) & 0x01)
                {
                    keyboard_modifier_keys = keyboard_modifier_keys | 0x40;
                }
                else if (b == 7 && i == 5 && (state[i] >> b) & 0x01)
 2d8:	ea a7       	std	Y+42, r30	; 0x2a
 2da:	fb a7       	std	Y+43, r31	; 0x2b
 2dc:	2c a7       	std	Y+44, r18	; 0x2c
 2de:	3d a7       	std	Y+45, r19	; 0x2d
 2e0:	db 01       	movw	r26, r22
 2e2:	6e a7       	std	Y+46, r22	; 0x2e
 2e4:	bf a7       	std	Y+47, r27	; 0x2f
    TIMSK0 = (1 << TOIE0);

    while (1)
    {
        uint8_t i, b, i_key;
        print("\nmain loop started\n");
 2e6:	84 ec       	ldi	r24, 0xC4	; 196
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	4b d4       	rcall	.+2198   	; 0xb82 <print_P>
        // empty all keypresses
        for (i_key = 0; i_key < 6; i_key++)
        {
            keyboard_keys[i_key] = 0;
 2ec:	10 92 8b 01 	sts	0x018B, r1
 2f0:	10 92 8c 01 	sts	0x018C, r1
 2f4:	10 92 8d 01 	sts	0x018D, r1
 2f8:	10 92 8e 01 	sts	0x018E, r1
 2fc:	10 92 8f 01 	sts	0x018F, r1
 300:	10 92 90 01 	sts	0x0190, r1
        }
        i_key = 0;
        keyboard_modifier_keys = 0x00;
 304:	10 92 8a 01 	sts	0x018A, r1
        // configure ports 0 = input, 1 = output
        // columns: F0 F1 F4 F5 F6 F7 B6 B5 B4 D7 D6 C7 C6 D3 D2
        // rows: D1 D0 B7 B3 B2 B1
        DDRB = 0xCC; // 0, 1 inputs, 2, 3, 6, 7 outputs
 308:	bc ec       	ldi	r27, 0xCC	; 204
 30a:	b4 b9       	out	0x04, r27	; 4
        DDRC = 0xC0; // 6, 7 outputs
 30c:	e0 ec       	ldi	r30, 0xC0	; 192
 30e:	e7 b9       	out	0x07, r30	; 7
        DDRD = 0xCC; // 0, 1, inputs 2, 3, 4, 5 outputs
 310:	ba b9       	out	0x0a, r27	; 10
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	50 e0       	ldi	r21, 0x00	; 0

        // read all ports
        for (b = 0; b < 15; b++)
        {
            *(columns[b]) = *(columns[b]) | (0x01 << columnShift[b]);
 316:	fa 01       	movw	r30, r20
 318:	ee 0f       	add	r30, r30
 31a:	ff 1f       	adc	r31, r31
 31c:	e7 59       	subi	r30, 0x97	; 151
 31e:	fe 4f       	sbci	r31, 0xFE	; 254
 320:	20 81       	ld	r18, Z
 322:	31 81       	ldd	r19, Z+1	; 0x01
 324:	a0 81       	ld	r26, Z
 326:	b1 81       	ldd	r27, Z+1	; 0x01
 328:	fa 01       	movw	r30, r20
 32a:	e6 5a       	subi	r30, 0xA6	; 166
 32c:	fe 4f       	sbci	r31, 0xFE	; 254
 32e:	c3 01       	movw	r24, r6
 330:	00 80       	ld	r0, Z
 332:	02 c0       	rjmp	.+4      	; 0x338 <main+0x106>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	0a 94       	dec	r0
 33a:	e2 f7       	brpl	.-8      	; 0x334 <main+0x102>
 33c:	68 2f       	mov	r22, r24
 33e:	8c 91       	ld	r24, X
 340:	86 2b       	or	r24, r22
 342:	d9 01       	movw	r26, r18
 344:	8c 93       	st	X, r24
            if((PIND >> 1) & 0x01)
 346:	49 9b       	sbis	0x09, 1	; 9
 348:	0d c0       	rjmp	.+26     	; 0x364 <main+0x132>
            {
                state[0] = state[0] | (0x01 << b );
 34a:	93 01       	movw	r18, r6
 34c:	04 2e       	mov	r0, r20
 34e:	02 c0       	rjmp	.+4      	; 0x354 <main+0x122>
 350:	22 0f       	add	r18, r18
 352:	33 1f       	adc	r19, r19
 354:	0a 94       	dec	r0
 356:	e2 f7       	brpl	.-8      	; 0x350 <main+0x11e>
 358:	89 81       	ldd	r24, Y+1	; 0x01
 35a:	9a 81       	ldd	r25, Y+2	; 0x02
 35c:	82 2b       	or	r24, r18
 35e:	93 2b       	or	r25, r19
 360:	9a 83       	std	Y+2, r25	; 0x02
 362:	89 83       	std	Y+1, r24	; 0x01
            }
            if(PIND & 0x01)
 364:	48 9b       	sbis	0x09, 0	; 9
 366:	0d c0       	rjmp	.+26     	; 0x382 <main+0x150>
            {
                state[1] = state[1] | (0x01 << b);
 368:	93 01       	movw	r18, r6
 36a:	04 2e       	mov	r0, r20
 36c:	02 c0       	rjmp	.+4      	; 0x372 <main+0x140>
 36e:	22 0f       	add	r18, r18
 370:	33 1f       	adc	r19, r19
 372:	0a 94       	dec	r0
 374:	e2 f7       	brpl	.-8      	; 0x36e <main+0x13c>
 376:	8b 81       	ldd	r24, Y+3	; 0x03
 378:	9c 81       	ldd	r25, Y+4	; 0x04
 37a:	82 2b       	or	r24, r18
 37c:	93 2b       	or	r25, r19
 37e:	9c 83       	std	Y+4, r25	; 0x04
 380:	8b 83       	std	Y+3, r24	; 0x03
            }
            if((PINB >> 7) & 0x01)
 382:	1f 9b       	sbis	0x03, 7	; 3
 384:	0d c0       	rjmp	.+26     	; 0x3a0 <main+0x16e>
            {
                state[2] = state[2] | (0x01 << b);
 386:	93 01       	movw	r18, r6
 388:	04 2e       	mov	r0, r20
 38a:	02 c0       	rjmp	.+4      	; 0x390 <main+0x15e>
 38c:	22 0f       	add	r18, r18
 38e:	33 1f       	adc	r19, r19
 390:	0a 94       	dec	r0
 392:	e2 f7       	brpl	.-8      	; 0x38c <main+0x15a>
 394:	8d 81       	ldd	r24, Y+5	; 0x05
 396:	9e 81       	ldd	r25, Y+6	; 0x06
 398:	82 2b       	or	r24, r18
 39a:	93 2b       	or	r25, r19
 39c:	9e 83       	std	Y+6, r25	; 0x06
 39e:	8d 83       	std	Y+5, r24	; 0x05
            }
            if((PINB >> 3) & 0x01)
 3a0:	1b 9b       	sbis	0x03, 3	; 3
 3a2:	0d c0       	rjmp	.+26     	; 0x3be <main+0x18c>
            {
                state[3] = state[3] | (0x01 << b);
 3a4:	93 01       	movw	r18, r6
 3a6:	04 2e       	mov	r0, r20
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <main+0x17c>
 3aa:	22 0f       	add	r18, r18
 3ac:	33 1f       	adc	r19, r19
 3ae:	0a 94       	dec	r0
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <main+0x178>
 3b2:	8f 81       	ldd	r24, Y+7	; 0x07
 3b4:	98 85       	ldd	r25, Y+8	; 0x08
 3b6:	82 2b       	or	r24, r18
 3b8:	93 2b       	or	r25, r19
 3ba:	98 87       	std	Y+8, r25	; 0x08
 3bc:	8f 83       	std	Y+7, r24	; 0x07
            }
            if((PINB >> 2) & 0x01)
 3be:	1a 9b       	sbis	0x03, 2	; 3
 3c0:	0d c0       	rjmp	.+26     	; 0x3dc <main+0x1aa>
            {
                state[4] = state[4] | (0x01 << b);
 3c2:	93 01       	movw	r18, r6
 3c4:	04 2e       	mov	r0, r20
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <main+0x19a>
 3c8:	22 0f       	add	r18, r18
 3ca:	33 1f       	adc	r19, r19
 3cc:	0a 94       	dec	r0
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <main+0x196>
 3d0:	89 85       	ldd	r24, Y+9	; 0x09
 3d2:	9a 85       	ldd	r25, Y+10	; 0x0a
 3d4:	82 2b       	or	r24, r18
 3d6:	93 2b       	or	r25, r19
 3d8:	9a 87       	std	Y+10, r25	; 0x0a
 3da:	89 87       	std	Y+9, r24	; 0x09
            }
            if((PINB >> 1) & 0x01)
 3dc:	19 9b       	sbis	0x03, 1	; 3
 3de:	0d c0       	rjmp	.+26     	; 0x3fa <main+0x1c8>
            {
                state[5] = state[5] | (0x01 << b);
 3e0:	93 01       	movw	r18, r6
 3e2:	04 2e       	mov	r0, r20
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <main+0x1b8>
 3e6:	22 0f       	add	r18, r18
 3e8:	33 1f       	adc	r19, r19
 3ea:	0a 94       	dec	r0
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <main+0x1b4>
 3ee:	8b 85       	ldd	r24, Y+11	; 0x0b
 3f0:	9c 85       	ldd	r25, Y+12	; 0x0c
 3f2:	82 2b       	or	r24, r18
 3f4:	93 2b       	or	r25, r19
 3f6:	9c 87       	std	Y+12, r25	; 0x0c
 3f8:	8b 87       	std	Y+11, r24	; 0x0b
            }
            *(columns[b]) = *(columns[b]) & ~(0x01 << columnShift[b]);
 3fa:	fa 01       	movw	r30, r20
 3fc:	ee 0f       	add	r30, r30
 3fe:	ff 1f       	adc	r31, r31
 400:	e7 59       	subi	r30, 0x97	; 151
 402:	fe 4f       	sbci	r31, 0xFE	; 254
 404:	a0 81       	ld	r26, Z
 406:	b1 81       	ldd	r27, Z+1	; 0x01
 408:	01 90       	ld	r0, Z+
 40a:	f0 81       	ld	r31, Z
 40c:	e0 2d       	mov	r30, r0
 40e:	60 95       	com	r22
 410:	80 81       	ld	r24, Z
 412:	86 23       	and	r24, r22
 414:	8c 93       	st	X, r24
 416:	4f 5f       	subi	r20, 0xFF	; 255
 418:	5f 4f       	sbci	r21, 0xFF	; 255
        DDRB = 0xCC; // 0, 1 inputs, 2, 3, 6, 7 outputs
        DDRC = 0xC0; // 6, 7 outputs
        DDRD = 0xCC; // 0, 1, inputs 2, 3, 4, 5 outputs

        // read all ports
        for (b = 0; b < 15; b++)
 41a:	4f 30       	cpi	r20, 0x0F	; 15
 41c:	51 05       	cpc	r21, r1
 41e:	09 f0       	breq	.+2      	; 0x422 <main+0x1f0>
 420:	7a cf       	rjmp	.-268    	; 0x316 <main+0xe4>
        {
            reset_idle = 1;
            for (b = 0; b < 15; b++)
            {
                // Check all modifier keys
                if (b == 5 && i == 0 && (state[i] >> b) & 0x01)
 422:	89 81       	ldd	r24, Y+1	; 0x01
 424:	9a 81       	ldd	r25, Y+2	; 0x02
 426:	9c 01       	movw	r18, r24
 428:	e5 e0       	ldi	r30, 0x05	; 5
 42a:	36 95       	lsr	r19
 42c:	27 95       	ror	r18
 42e:	ea 95       	dec	r30
 430:	e1 f7       	brne	.-8      	; 0x42a <main+0x1f8>
 432:	b2 2f       	mov	r27, r18
 434:	b1 70       	andi	r27, 0x01	; 1
 436:	b9 a7       	std	Y+41, r27	; 0x29
                {
                    keyboard_modifier_keys = keyboard_modifier_keys | 0x01;
                }
                else if (b == 4 && i == 0 && (state[i] >> b) & 0x01)
 438:	74 e0       	ldi	r23, 0x04	; 4
 43a:	96 95       	lsr	r25
 43c:	87 95       	ror	r24
 43e:	7a 95       	dec	r23
 440:	e1 f7       	brne	.-8      	; 0x43a <main+0x208>
 442:	e8 2f       	mov	r30, r24
 444:	e1 70       	andi	r30, 0x01	; 1
 446:	e8 a7       	std	Y+40, r30	; 0x28
                {
                    keyboard_modifier_keys = keyboard_modifier_keys | 0x02;
                }
                else if (b == 2 && i == 5 && (state[i] >> b) & 0x01)
 448:	2b 85       	ldd	r18, Y+11	; 0x0b
 44a:	3c 85       	ldd	r19, Y+12	; 0x0c
 44c:	c9 01       	movw	r24, r18
 44e:	96 95       	lsr	r25
 450:	87 95       	ror	r24
 452:	96 95       	lsr	r25
 454:	87 95       	ror	r24
 456:	f8 2f       	mov	r31, r24
 458:	f1 70       	andi	r31, 0x01	; 1
 45a:	ff a3       	std	Y+39, r31	; 0x27
                {
                    keyboard_modifier_keys = keyboard_modifier_keys | 0x04;
                }
                else if (b == 1 && i == 5 && (state[i] >> b) & 0x01)
 45c:	c9 01       	movw	r24, r18
 45e:	96 95       	lsr	r25
 460:	87 95       	ror	r24
 462:	48 2f       	mov	r20, r24
 464:	41 70       	andi	r20, 0x01	; 1
 466:	4e a3       	std	Y+38, r20	; 0x26
                {
                    keyboard_modifier_keys = keyboard_modifier_keys | 0x08;
                }
                else if (b == 11 && i == 5 && (state[i] >> b) & 0x01)
 468:	83 2f       	mov	r24, r19
 46a:	86 95       	lsr	r24
 46c:	86 95       	lsr	r24
 46e:	86 95       	lsr	r24
 470:	81 70       	andi	r24, 0x01	; 1
 472:	8d a3       	std	Y+37, r24	; 0x25
                {
                    keyboard_modifier_keys = keyboard_modifier_keys | 0x10;
                }
                else if (b == 10 && i == 5 && (state[i] >> b) & 0x01)
 474:	83 2f       	mov	r24, r19
 476:	86 95       	lsr	r24
 478:	86 95       	lsr	r24
 47a:	22 24       	eor	r2, r2
 47c:	23 94       	inc	r2
 47e:	28 22       	and	r2, r24
                {
                    keyboard_modifier_keys = keyboard_modifier_keys | 0x20;
                }
                else if (b == 8 && i == 5&& (state[i] >> b) & 0x01)
 480:	33 24       	eor	r3, r3
 482:	33 94       	inc	r3
 484:	33 22       	and	r3, r19
                {
                    keyboard_modifier_keys = keyboard_modifier_keys | 0x40;
                }
                else if (b == 7 && i == 5 && (state[i] >> b) & 0x01)
 486:	22 0f       	add	r18, r18
 488:	23 2f       	mov	r18, r19
 48a:	22 1f       	adc	r18, r18
 48c:	33 0b       	sbc	r19, r19
 48e:	31 95       	neg	r19
 490:	44 24       	eor	r4, r4
 492:	43 94       	inc	r4
 494:	42 22       	and	r4, r18
 496:	10 91 8a 01 	lds	r17, 0x018A
 49a:	8a a5       	ldd	r24, Y+42	; 0x2a
 49c:	9b a5       	ldd	r25, Y+43	; 0x2b
 49e:	4c 01       	movw	r8, r24
 4a0:	8c a5       	ldd	r24, Y+44	; 0x2c
 4a2:	9d a5       	ldd	r25, Y+45	; 0x2d
 4a4:	5c 01       	movw	r10, r24
 4a6:	8e a5       	ldd	r24, Y+46	; 0x2e
 4a8:	9f a5       	ldd	r25, Y+47	; 0x2f
 4aa:	6c 01       	movw	r12, r24
 4ac:	55 24       	eor	r5, r5
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	99 c0       	rjmp	.+306    	; 0x5e6 <main+0x3b4>
 4b4:	8e 2d       	mov	r24, r14
        {
            reset_idle = 1;
            for (b = 0; b < 15; b++)
            {
                // Check all modifier keys
                if (b == 5 && i == 0 && (state[i] >> b) & 0x01)
 4b6:	85 30       	cpi	r24, 0x05	; 5
 4b8:	41 f4       	brne	.+16     	; 0x4ca <main+0x298>
 4ba:	66 23       	and	r22, r22
 4bc:	09 f0       	breq	.+2      	; 0x4c0 <main+0x28e>
 4be:	41 c0       	rjmp	.+130    	; 0x542 <main+0x310>
 4c0:	89 a5       	ldd	r24, Y+41	; 0x29
 4c2:	88 23       	and	r24, r24
 4c4:	f1 f1       	breq	.+124    	; 0x542 <main+0x310>
                {
                    keyboard_modifier_keys = keyboard_modifier_keys | 0x01;
 4c6:	11 60       	ori	r17, 0x01	; 1
 4c8:	74 c0       	rjmp	.+232    	; 0x5b2 <main+0x380>
                }
                else if (b == 4 && i == 0 && (state[i] >> b) & 0x01)
 4ca:	84 30       	cpi	r24, 0x04	; 4
 4cc:	39 f4       	brne	.+14     	; 0x4dc <main+0x2aa>
 4ce:	66 23       	and	r22, r22
 4d0:	c1 f5       	brne	.+112    	; 0x542 <main+0x310>
 4d2:	98 a5       	ldd	r25, Y+40	; 0x28
 4d4:	99 23       	and	r25, r25
 4d6:	a9 f1       	breq	.+106    	; 0x542 <main+0x310>
                {
                    keyboard_modifier_keys = keyboard_modifier_keys | 0x02;
 4d8:	12 60       	ori	r17, 0x02	; 2
 4da:	6b c0       	rjmp	.+214    	; 0x5b2 <main+0x380>
                }
                else if (b == 2 && i == 5 && (state[i] >> b) & 0x01)
 4dc:	82 30       	cpi	r24, 0x02	; 2
 4de:	39 f4       	brne	.+14     	; 0x4ee <main+0x2bc>
 4e0:	65 30       	cpi	r22, 0x05	; 5
 4e2:	79 f5       	brne	.+94     	; 0x542 <main+0x310>
 4e4:	ef a1       	ldd	r30, Y+39	; 0x27
 4e6:	ee 23       	and	r30, r30
 4e8:	61 f1       	breq	.+88     	; 0x542 <main+0x310>
                {
                    keyboard_modifier_keys = keyboard_modifier_keys | 0x04;
 4ea:	14 60       	ori	r17, 0x04	; 4
 4ec:	62 c0       	rjmp	.+196    	; 0x5b2 <main+0x380>
                }
                else if (b == 1 && i == 5 && (state[i] >> b) & 0x01)
 4ee:	81 30       	cpi	r24, 0x01	; 1
 4f0:	39 f4       	brne	.+14     	; 0x500 <main+0x2ce>
 4f2:	65 30       	cpi	r22, 0x05	; 5
 4f4:	31 f5       	brne	.+76     	; 0x542 <main+0x310>
 4f6:	fe a1       	ldd	r31, Y+38	; 0x26
 4f8:	ff 23       	and	r31, r31
 4fa:	19 f1       	breq	.+70     	; 0x542 <main+0x310>
                {
                    keyboard_modifier_keys = keyboard_modifier_keys | 0x08;
 4fc:	18 60       	ori	r17, 0x08	; 8
 4fe:	59 c0       	rjmp	.+178    	; 0x5b2 <main+0x380>
                }
                else if (b == 11 && i == 5 && (state[i] >> b) & 0x01)
 500:	8b 30       	cpi	r24, 0x0B	; 11
 502:	39 f4       	brne	.+14     	; 0x512 <main+0x2e0>
 504:	65 30       	cpi	r22, 0x05	; 5
 506:	e9 f4       	brne	.+58     	; 0x542 <main+0x310>
 508:	2d a1       	ldd	r18, Y+37	; 0x25
 50a:	22 23       	and	r18, r18
 50c:	d1 f0       	breq	.+52     	; 0x542 <main+0x310>
                {
                    keyboard_modifier_keys = keyboard_modifier_keys | 0x10;
 50e:	10 61       	ori	r17, 0x10	; 16
 510:	50 c0       	rjmp	.+160    	; 0x5b2 <main+0x380>
                }
                else if (b == 10 && i == 5 && (state[i] >> b) & 0x01)
 512:	8a 30       	cpi	r24, 0x0A	; 10
 514:	31 f4       	brne	.+12     	; 0x522 <main+0x2f0>
 516:	65 30       	cpi	r22, 0x05	; 5
 518:	a1 f4       	brne	.+40     	; 0x542 <main+0x310>
 51a:	22 20       	and	r2, r2
 51c:	91 f0       	breq	.+36     	; 0x542 <main+0x310>
                {
                    keyboard_modifier_keys = keyboard_modifier_keys | 0x20;
 51e:	10 62       	ori	r17, 0x20	; 32
 520:	48 c0       	rjmp	.+144    	; 0x5b2 <main+0x380>
                }
                else if (b == 8 && i == 5&& (state[i] >> b) & 0x01)
 522:	88 30       	cpi	r24, 0x08	; 8
 524:	31 f4       	brne	.+12     	; 0x532 <main+0x300>
 526:	65 30       	cpi	r22, 0x05	; 5
 528:	61 f4       	brne	.+24     	; 0x542 <main+0x310>
 52a:	33 20       	and	r3, r3
 52c:	51 f0       	breq	.+20     	; 0x542 <main+0x310>
                {
                    keyboard_modifier_keys = keyboard_modifier_keys | 0x40;
 52e:	10 64       	ori	r17, 0x40	; 64
 530:	40 c0       	rjmp	.+128    	; 0x5b2 <main+0x380>
                }
                else if (b == 7 && i == 5 && (state[i] >> b) & 0x01)
 532:	87 30       	cpi	r24, 0x07	; 7
 534:	31 f4       	brne	.+12     	; 0x542 <main+0x310>
 536:	65 30       	cpi	r22, 0x05	; 5
 538:	21 f4       	brne	.+8      	; 0x542 <main+0x310>
 53a:	44 20       	and	r4, r4
 53c:	11 f0       	breq	.+4      	; 0x542 <main+0x310>
                {
                    keyboard_modifier_keys = keyboard_modifier_keys | 0x80;
 53e:	10 68       	ori	r17, 0x80	; 128
 540:	38 c0       	rjmp	.+112    	; 0x5b2 <main+0x380>
                }
                else if (b == 8 && i == 5&& (state[i] >> b) & 0x01)
                {
                    keyboard_modifier_keys = keyboard_modifier_keys | 0x40;
                }
                else if (b == 7 && i == 5 && (state[i] >> b) & 0x01)
 542:	e8 aa       	std	Y+48, r14	; 0x30
                {
                    keyboard_modifier_keys = keyboard_modifier_keys | 0x80;
                }
                // Check the normal keys
                else if (keys[i][b] != 0x00)
 544:	0c 91       	ld	r16, X
 546:	00 23       	and	r16, r16
 548:	a1 f1       	breq	.+104    	; 0x5b2 <main+0x380>
                {
                    if (((state[i] >> b) & 0x01) == ((state_prev[i] >> b) & 0x01))
 54a:	f4 01       	movw	r30, r8
 54c:	40 81       	ld	r20, Z
 54e:	51 81       	ldd	r21, Z+1	; 0x01
 550:	f5 01       	movw	r30, r10
 552:	80 81       	ld	r24, Z
 554:	91 81       	ldd	r25, Z+1	; 0x01
 556:	84 27       	eor	r24, r20
 558:	95 27       	eor	r25, r21
 55a:	0e 2c       	mov	r0, r14
 55c:	02 c0       	rjmp	.+4      	; 0x562 <main+0x330>
 55e:	96 95       	lsr	r25
 560:	87 95       	ror	r24
 562:	0a 94       	dec	r0
 564:	e2 f7       	brpl	.-8      	; 0x55e <main+0x32c>
 566:	80 fd       	sbrc	r24, 0
 568:	10 c0       	rjmp	.+32     	; 0x58a <main+0x358>
                    {
                        sum[i] |= (state[i] & (0x01 << b));
 56a:	93 01       	movw	r18, r6
 56c:	0e 2c       	mov	r0, r14
 56e:	02 c0       	rjmp	.+4      	; 0x574 <main+0x342>
 570:	22 0f       	add	r18, r18
 572:	33 1f       	adc	r19, r19
 574:	0a 94       	dec	r0
 576:	e2 f7       	brpl	.-8      	; 0x570 <main+0x33e>
 578:	24 23       	and	r18, r20
 57a:	35 23       	and	r19, r21
 57c:	f6 01       	movw	r30, r12
 57e:	80 81       	ld	r24, Z
 580:	91 81       	ldd	r25, Z+1	; 0x01
 582:	82 2b       	or	r24, r18
 584:	93 2b       	or	r25, r19
 586:	91 83       	std	Z+1, r25	; 0x01
 588:	80 83       	st	Z, r24
                    }
                    if ((sum[i] >> b) & 0x01 && (i_key < 6))
 58a:	f6 01       	movw	r30, r12
 58c:	80 81       	ld	r24, Z
 58e:	91 81       	ldd	r25, Z+1	; 0x01
 590:	08 a8       	ldd	r0, Y+48	; 0x30
 592:	02 c0       	rjmp	.+4      	; 0x598 <main+0x366>
 594:	96 95       	lsr	r25
 596:	87 95       	ror	r24
 598:	0a 94       	dec	r0
 59a:	e2 f7       	brpl	.-8      	; 0x594 <main+0x362>
 59c:	80 ff       	sbrs	r24, 0
 59e:	09 c0       	rjmp	.+18     	; 0x5b2 <main+0x380>
 5a0:	f5 e0       	ldi	r31, 0x05	; 5
 5a2:	f5 15       	cp	r31, r5
 5a4:	30 f0       	brcs	.+12     	; 0x5b2 <main+0x380>
                    {
                        keyboard_keys[i_key] = keys[i][b];
 5a6:	e5 2d       	mov	r30, r5
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	e5 57       	subi	r30, 0x75	; 117
 5ac:	fe 4f       	sbci	r31, 0xFE	; 254
 5ae:	00 83       	st	Z, r16
                        i_key++;
 5b0:	53 94       	inc	r5
 5b2:	08 94       	sec
 5b4:	e1 1c       	adc	r14, r1
 5b6:	f1 1c       	adc	r15, r1
 5b8:	11 96       	adiw	r26, 0x01	; 1
        }
        // check for changes
        for (i = 0; i < 6; i++)
        {
            reset_idle = 1;
            for (b = 0; b < 15; b++)
 5ba:	2f e0       	ldi	r18, 0x0F	; 15
 5bc:	e2 16       	cp	r14, r18
 5be:	f1 04       	cpc	r15, r1
 5c0:	09 f0       	breq	.+2      	; 0x5c4 <main+0x392>
 5c2:	78 cf       	rjmp	.-272    	; 0x4b4 <main+0x282>
                        keyboard_keys[i_key] = keys[i][b];
                        i_key++;
                    }
                }
            }
            state_prev[i] = state[i];
 5c4:	d4 01       	movw	r26, r8
 5c6:	8d 91       	ld	r24, X+
 5c8:	9d 91       	ld	r25, X+
 5ca:	4d 01       	movw	r8, r26
 5cc:	f5 01       	movw	r30, r10
 5ce:	81 93       	st	Z+, r24
 5d0:	91 93       	st	Z+, r25
 5d2:	5f 01       	movw	r10, r30
 5d4:	6f 5f       	subi	r22, 0xFF	; 255
 5d6:	7f 4f       	sbci	r23, 0xFF	; 255
 5d8:	82 e0       	ldi	r24, 0x02	; 2
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	c8 0e       	add	r12, r24
 5de:	d9 1e       	adc	r13, r25
                state[5] = state[5] | (0x01 << b);
            }
            *(columns[b]) = *(columns[b]) & ~(0x01 << columnShift[b]);
        }
        // check for changes
        for (i = 0; i < 6; i++)
 5e0:	66 30       	cpi	r22, 0x06	; 6
 5e2:	71 05       	cpc	r23, r1
 5e4:	61 f0       	breq	.+24     	; 0x5fe <main+0x3cc>
 5e6:	db 01       	movw	r26, r22
 5e8:	aa 0f       	add	r26, r26
 5ea:	bb 1f       	adc	r27, r27
 5ec:	a6 0f       	add	r26, r22
 5ee:	b7 1f       	adc	r27, r23
 5f0:	aa 0f       	add	r26, r26
 5f2:	bb 1f       	adc	r27, r27
 5f4:	a0 50       	subi	r26, 0x00	; 0
 5f6:	bf 4f       	sbci	r27, 0xFF	; 255
 5f8:	ee 24       	eor	r14, r14
 5fa:	ff 24       	eor	r15, r15
 5fc:	5b cf       	rjmp	.-330    	; 0x4b4 <main+0x282>
 5fe:	10 93 8a 01 	sts	0x018A, r17
                    }
                }
            }
            state_prev[i] = state[i];
        }
        print("\nmodifiers: ");
 602:	87 eb       	ldi	r24, 0xB7	; 183
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	bd d2       	rcall	.+1402   	; 0xb82 <print_P>
        phex(keyboard_modifier_keys);
 608:	80 91 8a 01 	lds	r24, 0x018A
 60c:	b0 d2       	rcall	.+1376   	; 0xb6e <phex>
        print("\nkeys:\n");
 60e:	8f ea       	ldi	r24, 0xAF	; 175
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	b7 d2       	rcall	.+1390   	; 0xb82 <print_P>
 614:	0b e8       	ldi	r16, 0x8B	; 139
 616:	11 e0       	ldi	r17, 0x01	; 1
        for (i_key = 0; i_key < 6; i_key++)
        {
            phex(keyboard_keys[i_key]);
 618:	d8 01       	movw	r26, r16
 61a:	8d 91       	ld	r24, X+
 61c:	8d 01       	movw	r16, r26
 61e:	a7 d2       	rcall	.+1358   	; 0xb6e <phex>
            print(", ");
 620:	8c ea       	ldi	r24, 0xAC	; 172
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	ae d2       	rcall	.+1372   	; 0xb82 <print_P>
            state_prev[i] = state[i];
        }
        print("\nmodifiers: ");
        phex(keyboard_modifier_keys);
        print("\nkeys:\n");
        for (i_key = 0; i_key < 6; i_key++)
 626:	b1 e0       	ldi	r27, 0x01	; 1
 628:	01 39       	cpi	r16, 0x91	; 145
 62a:	1b 07       	cpc	r17, r27
 62c:	a9 f7       	brne	.-22     	; 0x618 <main+0x3e6>
 62e:	5b ce       	rjmp	.-842    	; 0x2e6 <main+0xb4>

00000630 <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	80 93 d7 00 	sts	0x00D7, r24
	USB_FREEZE();				// enable USB
 636:	80 ea       	ldi	r24, 0xA0	; 160
 638:	80 93 d8 00 	sts	0x00D8, r24
	PLL_CONFIG();				// config PLL
 63c:	82 e1       	ldi	r24, 0x12	; 18
 63e:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 640:	09 b4       	in	r0, 0x29	; 41
 642:	00 fe       	sbrs	r0, 0
 644:	fd cf       	rjmp	.-6      	; 0x640 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 646:	80 e9       	ldi	r24, 0x90	; 144
 648:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 64c:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 650:	10 92 92 01 	sts	0x0192, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 654:	8c e0       	ldi	r24, 0x0C	; 12
 656:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 65a:	78 94       	sei
}
 65c:	08 95       	ret

0000065e <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
 65e:	80 91 92 01 	lds	r24, 0x0192
}
 662:	08 95       	ret

00000664 <usb_debug_putchar>:
	return 0;
}

// transmit a character.  0 returned on success, -1 on error
int8_t usb_debug_putchar(uint8_t c)
{
 664:	48 2f       	mov	r20, r24
	static uint8_t previous_timeout=0;
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 666:	80 91 92 01 	lds	r24, 0x0192
 66a:	88 23       	and	r24, r24
 66c:	09 f4       	brne	.+2      	; 0x670 <usb_debug_putchar+0xc>
 66e:	3e c0       	rjmp	.+124    	; 0x6ec <usb_debug_putchar+0x88>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 670:	2f b7       	in	r18, 0x3f	; 63
	cli();
 672:	f8 94       	cli
	UENUM = DEBUG_TX_ENDPOINT;
 674:	84 e0       	ldi	r24, 0x04	; 4
 676:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (previous_timeout) {
 67a:	80 91 96 01 	lds	r24, 0x0196
 67e:	88 23       	and	r24, r24
 680:	41 f0       	breq	.+16     	; 0x692 <usb_debug_putchar+0x2e>
		if (!(UEINTX & (1<<RWAL))) {
 682:	80 91 e8 00 	lds	r24, 0x00E8
 686:	85 fd       	sbrc	r24, 5
 688:	02 c0       	rjmp	.+4      	; 0x68e <usb_debug_putchar+0x2a>
			SREG = intr_state;
 68a:	2f bf       	out	0x3f, r18	; 63
 68c:	12 c0       	rjmp	.+36     	; 0x6b2 <usb_debug_putchar+0x4e>
			return -1;
		}
		previous_timeout = 0;
 68e:	10 92 96 01 	sts	0x0196, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
 692:	90 91 e4 00 	lds	r25, 0x00E4
 696:	9c 5f       	subi	r25, 0xFC	; 252
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = DEBUG_TX_ENDPOINT;
 698:	34 e0       	ldi	r19, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 69a:	80 91 e8 00 	lds	r24, 0x00E8
 69e:	85 fd       	sbrc	r24, 5
 6a0:	13 c0       	rjmp	.+38     	; 0x6c8 <usb_debug_putchar+0x64>
		SREG = intr_state;
 6a2:	2f bf       	out	0x3f, r18	; 63
		// have we waited too long?
		if (UDFNUML == timeout) {
 6a4:	80 91 e4 00 	lds	r24, 0x00E4
 6a8:	89 17       	cp	r24, r25
 6aa:	29 f4       	brne	.+10     	; 0x6b6 <usb_debug_putchar+0x52>
			previous_timeout = 1;
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	80 93 96 01 	sts	0x0196, r24
 6b2:	8f ef       	ldi	r24, 0xFF	; 255
 6b4:	08 95       	ret
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 6b6:	80 91 92 01 	lds	r24, 0x0192
 6ba:	88 23       	and	r24, r24
 6bc:	b9 f0       	breq	.+46     	; 0x6ec <usb_debug_putchar+0x88>
		// get ready to try checking again
		intr_state = SREG;
 6be:	2f b7       	in	r18, 0x3f	; 63
		cli();
 6c0:	f8 94       	cli
		UENUM = DEBUG_TX_ENDPOINT;
 6c2:	30 93 e9 00 	sts	0x00E9, r19
 6c6:	e9 cf       	rjmp	.-46     	; 0x69a <usb_debug_putchar+0x36>
	}
	// actually write the byte into the FIFO
	UEDATX = c;
 6c8:	40 93 f1 00 	sts	0x00F1, r20
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) {
 6cc:	80 91 e8 00 	lds	r24, 0x00E8
 6d0:	85 fd       	sbrc	r24, 5
 6d2:	06 c0       	rjmp	.+12     	; 0x6e0 <usb_debug_putchar+0x7c>
		UEINTX = 0x3A;
 6d4:	8a e3       	ldi	r24, 0x3A	; 58
 6d6:	80 93 e8 00 	sts	0x00E8, r24
		debug_flush_timer = 0;
 6da:	10 92 94 01 	sts	0x0194, r1
 6de:	03 c0       	rjmp	.+6      	; 0x6e6 <usb_debug_putchar+0x82>
	} else {
		debug_flush_timer = 2;
 6e0:	82 e0       	ldi	r24, 0x02	; 2
 6e2:	80 93 94 01 	sts	0x0194, r24
	}
	SREG = intr_state;
 6e6:	2f bf       	out	0x3f, r18	; 63
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	08 95       	ret
	return 0;
 6ec:	8f ef       	ldi	r24, 0xFF	; 255
}
 6ee:	08 95       	ret

000006f0 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 6f0:	1f 92       	push	r1
 6f2:	0f 92       	push	r0
 6f4:	0f b6       	in	r0, 0x3f	; 63
 6f6:	0f 92       	push	r0
 6f8:	11 24       	eor	r1, r1
 6fa:	2f 93       	push	r18
 6fc:	8f 93       	push	r24
 6fe:	9f 93       	push	r25
	uint8_t intbits, t, i;
	static uint8_t div4=0;

        intbits = UDINT;
 700:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 704:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 708:	98 2f       	mov	r25, r24
 70a:	83 ff       	sbrs	r24, 3
 70c:	0f c0       	rjmp	.+30     	; 0x72c <__vector_10+0x3c>
		UENUM = 0;
 70e:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
 718:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 71c:	82 e2       	ldi	r24, 0x22	; 34
 71e:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
 722:	88 e0       	ldi	r24, 0x08	; 8
 724:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
 728:	10 92 92 01 	sts	0x0192, r1
        }
	if ((intbits & (1<<SOFI)) && usb_configuration) {
 72c:	92 ff       	sbrs	r25, 2
 72e:	5a c0       	rjmp	.+180    	; 0x7e4 <__vector_10+0xf4>
 730:	80 91 92 01 	lds	r24, 0x0192
 734:	88 23       	and	r24, r24
 736:	09 f4       	brne	.+2      	; 0x73a <__vector_10+0x4a>
 738:	55 c0       	rjmp	.+170    	; 0x7e4 <__vector_10+0xf4>
		t = debug_flush_timer;
 73a:	80 91 94 01 	lds	r24, 0x0194
		if (t) {
 73e:	88 23       	and	r24, r24
 740:	91 f0       	breq	.+36     	; 0x766 <__vector_10+0x76>
			debug_flush_timer = -- t;
 742:	81 50       	subi	r24, 0x01	; 1
 744:	80 93 94 01 	sts	0x0194, r24
			if (!t) {
 748:	88 23       	and	r24, r24
 74a:	69 f4       	brne	.+26     	; 0x766 <__vector_10+0x76>
				UENUM = DEBUG_TX_ENDPOINT;
 74c:	84 e0       	ldi	r24, 0x04	; 4
 74e:	80 93 e9 00 	sts	0x00E9, r24
 752:	02 c0       	rjmp	.+4      	; 0x758 <__vector_10+0x68>
				while ((UEINTX & (1<<RWAL))) {
					UEDATX = 0;
 754:	10 92 f1 00 	sts	0x00F1, r1
		t = debug_flush_timer;
		if (t) {
			debug_flush_timer = -- t;
			if (!t) {
				UENUM = DEBUG_TX_ENDPOINT;
				while ((UEINTX & (1<<RWAL))) {
 758:	80 91 e8 00 	lds	r24, 0x00E8
 75c:	85 fd       	sbrc	r24, 5
 75e:	fa cf       	rjmp	.-12     	; 0x754 <__vector_10+0x64>
					UEDATX = 0;
				}
				UEINTX = 0x3A;
 760:	8a e3       	ldi	r24, 0x3A	; 58
 762:	80 93 e8 00 	sts	0x00E8, r24
			}
		}
		if (keyboard_idle_config && (++div4 & 3) == 0) {
 766:	20 91 87 01 	lds	r18, 0x0187
 76a:	22 23       	and	r18, r18
 76c:	d9 f1       	breq	.+118    	; 0x7e4 <__vector_10+0xf4>
 76e:	80 91 95 01 	lds	r24, 0x0195
 772:	8f 5f       	subi	r24, 0xFF	; 255
 774:	80 93 95 01 	sts	0x0195, r24
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	83 70       	andi	r24, 0x03	; 3
 77c:	90 70       	andi	r25, 0x00	; 0
 77e:	89 2b       	or	r24, r25
 780:	89 f5       	brne	.+98     	; 0x7e4 <__vector_10+0xf4>
			UENUM = KEYBOARD_ENDPOINT;
 782:	83 e0       	ldi	r24, 0x03	; 3
 784:	80 93 e9 00 	sts	0x00E9, r24
			if (UEINTX & (1<<RWAL)) {
 788:	80 91 e8 00 	lds	r24, 0x00E8
 78c:	85 ff       	sbrs	r24, 5
 78e:	2a c0       	rjmp	.+84     	; 0x7e4 <__vector_10+0xf4>
				keyboard_idle_count++;
 790:	80 91 93 01 	lds	r24, 0x0193
 794:	8f 5f       	subi	r24, 0xFF	; 255
 796:	80 93 93 01 	sts	0x0193, r24
				if (keyboard_idle_count == keyboard_idle_config) {
 79a:	82 17       	cp	r24, r18
 79c:	19 f5       	brne	.+70     	; 0x7e4 <__vector_10+0xf4>
					keyboard_idle_count = 0;
 79e:	10 92 93 01 	sts	0x0193, r1
					UEDATX = keyboard_modifier_keys;
 7a2:	80 91 8a 01 	lds	r24, 0x018A
 7a6:	80 93 f1 00 	sts	0x00F1, r24
					UEDATX = 0;
 7aa:	10 92 f1 00 	sts	0x00F1, r1
					for (i=0; i<6; i++) {
						UEDATX = keyboard_keys[i];
 7ae:	80 91 8b 01 	lds	r24, 0x018B
 7b2:	80 93 f1 00 	sts	0x00F1, r24
 7b6:	80 91 8c 01 	lds	r24, 0x018C
 7ba:	80 93 f1 00 	sts	0x00F1, r24
 7be:	80 91 8d 01 	lds	r24, 0x018D
 7c2:	80 93 f1 00 	sts	0x00F1, r24
 7c6:	80 91 8e 01 	lds	r24, 0x018E
 7ca:	80 93 f1 00 	sts	0x00F1, r24
 7ce:	80 91 8f 01 	lds	r24, 0x018F
 7d2:	80 93 f1 00 	sts	0x00F1, r24
 7d6:	80 91 90 01 	lds	r24, 0x0190
 7da:	80 93 f1 00 	sts	0x00F1, r24
					}
					UEINTX = 0x3A;
 7de:	8a e3       	ldi	r24, 0x3A	; 58
 7e0:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 7e4:	9f 91       	pop	r25
 7e6:	8f 91       	pop	r24
 7e8:	2f 91       	pop	r18
 7ea:	0f 90       	pop	r0
 7ec:	0f be       	out	0x3f, r0	; 63
 7ee:	0f 90       	pop	r0
 7f0:	1f 90       	pop	r1
 7f2:	18 95       	reti

000007f4 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 7f4:	1f 92       	push	r1
 7f6:	0f 92       	push	r0
 7f8:	0f b6       	in	r0, 0x3f	; 63
 7fa:	0f 92       	push	r0
 7fc:	11 24       	eor	r1, r1
 7fe:	2f 93       	push	r18
 800:	3f 93       	push	r19
 802:	4f 93       	push	r20
 804:	5f 93       	push	r21
 806:	6f 93       	push	r22
 808:	7f 93       	push	r23
 80a:	8f 93       	push	r24
 80c:	9f 93       	push	r25
 80e:	af 93       	push	r26
 810:	bf 93       	push	r27
 812:	cf 93       	push	r28
 814:	df 93       	push	r29
 816:	ef 93       	push	r30
 818:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 81a:	10 92 e9 00 	sts	0x00E9, r1
	intbits = UEINTX;
 81e:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 822:	83 ff       	sbrs	r24, 3
 824:	86 c1       	rjmp	.+780    	; 0xb32 <__stack+0x33>
                bmRequestType = UEDATX;
 826:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
 82a:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
 82e:	80 91 f1 00 	lds	r24, 0x00F1
 832:	a8 2f       	mov	r26, r24
 834:	b0 e0       	ldi	r27, 0x00	; 0
                wValue |= (UEDATX << 8);
 836:	20 91 f1 00 	lds	r18, 0x00F1
 83a:	92 2f       	mov	r25, r18
 83c:	80 e0       	ldi	r24, 0x00	; 0
 83e:	a8 2b       	or	r26, r24
 840:	b9 2b       	or	r27, r25
                wIndex = UEDATX;
 842:	80 91 f1 00 	lds	r24, 0x00F1
 846:	68 2f       	mov	r22, r24
 848:	70 e0       	ldi	r23, 0x00	; 0
                wIndex |= (UEDATX << 8);
 84a:	20 91 f1 00 	lds	r18, 0x00F1
 84e:	92 2f       	mov	r25, r18
 850:	80 e0       	ldi	r24, 0x00	; 0
 852:	68 2b       	or	r22, r24
 854:	79 2b       	or	r23, r25
                wLength = UEDATX;
 856:	80 91 f1 00 	lds	r24, 0x00F1
 85a:	c8 2f       	mov	r28, r24
 85c:	d0 e0       	ldi	r29, 0x00	; 0
                wLength |= (UEDATX << 8);
 85e:	20 91 f1 00 	lds	r18, 0x00F1
 862:	92 2f       	mov	r25, r18
 864:	80 e0       	ldi	r24, 0x00	; 0
 866:	c8 2b       	or	r28, r24
 868:	d9 2b       	or	r29, r25
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 86a:	82 ef       	ldi	r24, 0xF2	; 242
 86c:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
 870:	36 30       	cpi	r19, 0x06	; 6
 872:	09 f0       	breq	.+2      	; 0x876 <__vector_11+0x82>
 874:	56 c0       	rjmp	.+172    	; 0x922 <__vector_11+0x12e>
 876:	2f ee       	ldi	r18, 0xEF	; 239
 878:	30 e0       	ldi	r19, 0x00	; 0
 87a:	a9 01       	movw	r20, r18
 87c:	45 50       	subi	r20, 0x05	; 5
 87e:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
 880:	f9 01       	movw	r30, r18
 882:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
 884:	85 91       	lpm	r24, Z+
 886:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
 888:	8a 17       	cp	r24, r26
 88a:	9b 07       	cpc	r25, r27
 88c:	e1 f4       	brne	.+56     	; 0x8c6 <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 88e:	fa 01       	movw	r30, r20
 890:	85 91       	lpm	r24, Z+
 892:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
 894:	86 17       	cp	r24, r22
 896:	97 07       	cpc	r25, r23
 898:	b1 f4       	brne	.+44     	; 0x8c6 <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 89a:	9a 01       	movw	r18, r20
 89c:	2e 5f       	subi	r18, 0xFE	; 254
 89e:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
 8a0:	f9 01       	movw	r30, r18
 8a2:	65 91       	lpm	r22, Z+
 8a4:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
 8a6:	2e 5f       	subi	r18, 0xFE	; 254
 8a8:	3f 4f       	sbci	r19, 0xFF	; 255
 8aa:	f9 01       	movw	r30, r18
 8ac:	24 91       	lpm	r18, Z+
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 8ae:	ce 01       	movw	r24, r28
 8b0:	cf 3f       	cpi	r28, 0xFF	; 255
 8b2:	d1 05       	cpc	r29, r1
 8b4:	19 f0       	breq	.+6      	; 0x8bc <__vector_11+0xc8>
 8b6:	10 f0       	brcs	.+4      	; 0x8bc <__vector_11+0xc8>
 8b8:	8f ef       	ldi	r24, 0xFF	; 255
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	42 2f       	mov	r20, r18
 8be:	82 17       	cp	r24, r18
 8c0:	58 f4       	brcc	.+22     	; 0x8d8 <__vector_11+0xe4>
 8c2:	48 2f       	mov	r20, r24
 8c4:	09 c0       	rjmp	.+18     	; 0x8d8 <__vector_11+0xe4>
 8c6:	29 5f       	subi	r18, 0xF9	; 249
 8c8:	3f 4f       	sbci	r19, 0xFF	; 255
 8ca:	49 5f       	subi	r20, 0xF9	; 249
 8cc:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 8ce:	f1 e0       	ldi	r31, 0x01	; 1
 8d0:	2e 32       	cpi	r18, 0x2E	; 46
 8d2:	3f 07       	cpc	r19, r31
 8d4:	a9 f6       	brne	.-86     	; 0x880 <__vector_11+0x8c>
 8d6:	2d c1       	rjmp	.+602    	; 0xb32 <__stack+0x33>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 8d8:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 8da:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 8de:	28 2f       	mov	r18, r24
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	c9 01       	movw	r24, r18
 8e4:	85 70       	andi	r24, 0x05	; 5
 8e6:	90 70       	andi	r25, 0x00	; 0
 8e8:	89 2b       	or	r24, r25
 8ea:	b9 f3       	breq	.-18     	; 0x8da <__vector_11+0xe6>
				if (i & (1<<RXOUTI)) return;	// abort
 8ec:	22 fd       	sbrc	r18, 2
 8ee:	24 c1       	rjmp	.+584    	; 0xb38 <__stack+0x39>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 8f0:	34 2f       	mov	r19, r20
 8f2:	41 32       	cpi	r20, 0x21	; 33
 8f4:	08 f0       	brcs	.+2      	; 0x8f8 <__vector_11+0x104>
 8f6:	30 e2       	ldi	r19, 0x20	; 32
 8f8:	23 2f       	mov	r18, r19
 8fa:	cb 01       	movw	r24, r22
 8fc:	06 c0       	rjmp	.+12     	; 0x90a <__vector_11+0x116>
				for (i = n; i; i--) {
 8fe:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
 900:	01 96       	adiw	r24, 0x01	; 1
 902:	e4 91       	lpm	r30, Z+
 904:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 908:	21 50       	subi	r18, 0x01	; 1
 90a:	22 23       	and	r18, r18
 90c:	c1 f7       	brne	.-16     	; 0x8fe <__vector_11+0x10a>
 90e:	63 0f       	add	r22, r19
 910:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 912:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 914:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 918:	44 23       	and	r20, r20
 91a:	f9 f6       	brne	.-66     	; 0x8da <__vector_11+0xe6>
 91c:	30 32       	cpi	r19, 0x20	; 32
 91e:	e9 f2       	breq	.-70     	; 0x8da <__vector_11+0xe6>
 920:	0b c1       	rjmp	.+534    	; 0xb38 <__stack+0x39>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 922:	35 30       	cpi	r19, 0x05	; 5
 924:	61 f4       	brne	.+24     	; 0x93e <__vector_11+0x14a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 926:	8e ef       	ldi	r24, 0xFE	; 254
 928:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 92c:	80 91 e8 00 	lds	r24, 0x00E8
 930:	80 ff       	sbrs	r24, 0
 932:	fc cf       	rjmp	.-8      	; 0x92c <__vector_11+0x138>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 934:	8a 2f       	mov	r24, r26
 936:	80 68       	ori	r24, 0x80	; 128
 938:	80 93 e3 00 	sts	0x00E3, r24
 93c:	fd c0       	rjmp	.+506    	; 0xb38 <__stack+0x39>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 93e:	39 30       	cpi	r19, 0x09	; 9
 940:	31 f5       	brne	.+76     	; 0x98e <__vector_11+0x19a>
 942:	44 23       	and	r20, r20
 944:	09 f0       	breq	.+2      	; 0x948 <__vector_11+0x154>
 946:	70 c0       	rjmp	.+224    	; 0xa28 <__vector_11+0x234>
			usb_configuration = wValue;
 948:	a0 93 92 01 	sts	0x0192, r26
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 94c:	8e ef       	ldi	r24, 0xFE	; 254
 94e:	80 93 e8 00 	sts	0x00E8, r24
 952:	87 e2       	ldi	r24, 0x27	; 39
 954:	91 e0       	ldi	r25, 0x01	; 1
 956:	21 e0       	ldi	r18, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 958:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
 95c:	fc 01       	movw	r30, r24
 95e:	01 96       	adiw	r24, 0x01	; 1
 960:	e4 91       	lpm	r30, Z+
				UECONX = en;
 962:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
 966:	ee 23       	and	r30, r30
 968:	69 f0       	breq	.+26     	; 0x984 <__vector_11+0x190>
					UECFG0X = pgm_read_byte(cfg++);
 96a:	ac 01       	movw	r20, r24
 96c:	4f 5f       	subi	r20, 0xFF	; 255
 96e:	5f 4f       	sbci	r21, 0xFF	; 255
 970:	fc 01       	movw	r30, r24
 972:	84 91       	lpm	r24, Z+
 974:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
 978:	ca 01       	movw	r24, r20
 97a:	01 96       	adiw	r24, 0x01	; 1
 97c:	fa 01       	movw	r30, r20
 97e:	34 91       	lpm	r19, Z+
 980:	30 93 ed 00 	sts	0x00ED, r19
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 984:	2f 5f       	subi	r18, 0xFF	; 255
 986:	25 30       	cpi	r18, 0x05	; 5
 988:	39 f7       	brne	.-50     	; 0x958 <__vector_11+0x164>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 98a:	8e e1       	ldi	r24, 0x1E	; 30
 98c:	48 c0       	rjmp	.+144    	; 0xa1e <__vector_11+0x22a>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 98e:	38 30       	cpi	r19, 0x08	; 8
 990:	51 f4       	brne	.+20     	; 0x9a6 <__vector_11+0x1b2>
 992:	40 38       	cpi	r20, 0x80	; 128
 994:	09 f0       	breq	.+2      	; 0x998 <__vector_11+0x1a4>
 996:	48 c0       	rjmp	.+144    	; 0xa28 <__vector_11+0x234>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 998:	80 91 e8 00 	lds	r24, 0x00E8
 99c:	80 ff       	sbrs	r24, 0
 99e:	fc cf       	rjmp	.-8      	; 0x998 <__vector_11+0x1a4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 9a0:	80 91 92 01 	lds	r24, 0x0192
 9a4:	7c c0       	rjmp	.+248    	; 0xa9e <__vector_11+0x2aa>
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
 9a6:	33 23       	and	r19, r19
 9a8:	d1 f4       	brne	.+52     	; 0x9de <__vector_11+0x1ea>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 9aa:	80 91 e8 00 	lds	r24, 0x00E8
 9ae:	80 ff       	sbrs	r24, 0
 9b0:	fc cf       	rjmp	.-8      	; 0x9aa <__vector_11+0x1b6>

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 9b2:	42 38       	cpi	r20, 0x82	; 130
 9b4:	11 f0       	breq	.+4      	; 0x9ba <__vector_11+0x1c6>
 9b6:	80 e0       	ldi	r24, 0x00	; 0
 9b8:	0d c0       	rjmp	.+26     	; 0x9d4 <__vector_11+0x1e0>
				UENUM = wIndex;
 9ba:	60 93 e9 00 	sts	0x00E9, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
 9be:	80 91 eb 00 	lds	r24, 0x00EB
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	25 e0       	ldi	r18, 0x05	; 5
 9c6:	96 95       	lsr	r25
 9c8:	87 95       	ror	r24
 9ca:	2a 95       	dec	r18
 9cc:	e1 f7       	brne	.-8      	; 0x9c6 <__vector_11+0x1d2>
 9ce:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
 9d0:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
 9d4:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
 9d8:	10 92 f1 00 	sts	0x00F1, r1
 9dc:	7f c0       	rjmp	.+254    	; 0xadc <__vector_11+0x2e8>
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 9de:	31 30       	cpi	r19, 0x01	; 1
 9e0:	11 f0       	breq	.+4      	; 0x9e6 <__vector_11+0x1f2>
 9e2:	33 30       	cpi	r19, 0x03	; 3
 9e4:	09 f5       	brne	.+66     	; 0xa28 <__vector_11+0x234>
 9e6:	42 30       	cpi	r20, 0x02	; 2
 9e8:	f9 f4       	brne	.+62     	; 0xa28 <__vector_11+0x234>
 9ea:	10 97       	sbiw	r26, 0x00	; 0
 9ec:	e9 f4       	brne	.+58     	; 0xa28 <__vector_11+0x234>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
 9ee:	26 2f       	mov	r18, r22
 9f0:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 9f2:	82 2f       	mov	r24, r18
 9f4:	81 50       	subi	r24, 0x01	; 1
 9f6:	84 30       	cpi	r24, 0x04	; 4
 9f8:	b8 f4       	brcc	.+46     	; 0xa28 <__vector_11+0x234>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 9fa:	8e ef       	ldi	r24, 0xFE	; 254
 9fc:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 a00:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
 a04:	33 30       	cpi	r19, 0x03	; 3
 a06:	09 f4       	brne	.+2      	; 0xa0a <__vector_11+0x216>
 a08:	94 c0       	rjmp	.+296    	; 0xb32 <__stack+0x33>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 a0a:	89 e1       	ldi	r24, 0x19	; 25
 a0c:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	02 c0       	rjmp	.+4      	; 0xa1a <__vector_11+0x226>
 a16:	88 0f       	add	r24, r24
 a18:	99 1f       	adc	r25, r25
 a1a:	2a 95       	dec	r18
 a1c:	e2 f7       	brpl	.-8      	; 0xa16 <__vector_11+0x222>
 a1e:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
 a22:	10 92 ea 00 	sts	0x00EA, r1
 a26:	88 c0       	rjmp	.+272    	; 0xb38 <__stack+0x39>
				}
				return;
			}
		}
		#endif
		if (wIndex == KEYBOARD_INTERFACE) {
 a28:	61 15       	cp	r22, r1
 a2a:	71 05       	cpc	r23, r1
 a2c:	09 f0       	breq	.+2      	; 0xa30 <__vector_11+0x23c>
 a2e:	5a c0       	rjmp	.+180    	; 0xae4 <__vector_11+0x2f0>
			if (bmRequestType == 0xA1) {
 a30:	41 3a       	cpi	r20, 0xA1	; 161
 a32:	c1 f5       	brne	.+112    	; 0xaa4 <__vector_11+0x2b0>
				if (bRequest == HID_GET_REPORT) {
 a34:	31 30       	cpi	r19, 0x01	; 1
 a36:	09 f5       	brne	.+66     	; 0xa7a <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 a38:	80 91 e8 00 	lds	r24, 0x00E8
 a3c:	80 ff       	sbrs	r24, 0
 a3e:	fc cf       	rjmp	.-8      	; 0xa38 <__vector_11+0x244>
		#endif
		if (wIndex == KEYBOARD_INTERFACE) {
			if (bmRequestType == 0xA1) {
				if (bRequest == HID_GET_REPORT) {
					usb_wait_in_ready();
					UEDATX = keyboard_modifier_keys;
 a40:	80 91 8a 01 	lds	r24, 0x018A
 a44:	80 93 f1 00 	sts	0x00F1, r24
					UEDATX = 0;
 a48:	10 92 f1 00 	sts	0x00F1, r1
					for (i=0; i<6; i++) {
						UEDATX = keyboard_keys[i];
 a4c:	80 91 8b 01 	lds	r24, 0x018B
 a50:	80 93 f1 00 	sts	0x00F1, r24
 a54:	80 91 8c 01 	lds	r24, 0x018C
 a58:	80 93 f1 00 	sts	0x00F1, r24
 a5c:	80 91 8d 01 	lds	r24, 0x018D
 a60:	80 93 f1 00 	sts	0x00F1, r24
 a64:	80 91 8e 01 	lds	r24, 0x018E
 a68:	80 93 f1 00 	sts	0x00F1, r24
 a6c:	80 91 8f 01 	lds	r24, 0x018F
 a70:	80 93 f1 00 	sts	0x00F1, r24
 a74:	80 91 90 01 	lds	r24, 0x0190
 a78:	12 c0       	rjmp	.+36     	; 0xa9e <__vector_11+0x2aa>
					}
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_IDLE) {
 a7a:	32 30       	cpi	r19, 0x02	; 2
 a7c:	39 f4       	brne	.+14     	; 0xa8c <__vector_11+0x298>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 a7e:	80 91 e8 00 	lds	r24, 0x00E8
 a82:	80 ff       	sbrs	r24, 0
 a84:	fc cf       	rjmp	.-8      	; 0xa7e <__vector_11+0x28a>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_IDLE) {
					usb_wait_in_ready();
					UEDATX = keyboard_idle_config;
 a86:	80 91 87 01 	lds	r24, 0x0187
 a8a:	09 c0       	rjmp	.+18     	; 0xa9e <__vector_11+0x2aa>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_PROTOCOL) {
 a8c:	33 30       	cpi	r19, 0x03	; 3
 a8e:	09 f0       	breq	.+2      	; 0xa92 <__vector_11+0x29e>
 a90:	50 c0       	rjmp	.+160    	; 0xb32 <__stack+0x33>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 a92:	80 91 e8 00 	lds	r24, 0x00E8
 a96:	80 ff       	sbrs	r24, 0
 a98:	fc cf       	rjmp	.-8      	; 0xa92 <__vector_11+0x29e>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_PROTOCOL) {
					usb_wait_in_ready();
					UEDATX = keyboard_protocol;
 a9a:	80 91 88 01 	lds	r24, 0x0188
 a9e:	80 93 f1 00 	sts	0x00F1, r24
 aa2:	1c c0       	rjmp	.+56     	; 0xadc <__vector_11+0x2e8>
					usb_send_in();
					return;
				}
			}
			if (bmRequestType == 0x21) {
 aa4:	41 32       	cpi	r20, 0x21	; 33
 aa6:	09 f0       	breq	.+2      	; 0xaaa <__vector_11+0x2b6>
 aa8:	44 c0       	rjmp	.+136    	; 0xb32 <__stack+0x33>
				if (bRequest == HID_SET_REPORT) {
 aaa:	39 30       	cpi	r19, 0x09	; 9
 aac:	61 f4       	brne	.+24     	; 0xac6 <__vector_11+0x2d2>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 aae:	80 91 e8 00 	lds	r24, 0x00E8
 ab2:	82 ff       	sbrs	r24, 2
 ab4:	fc cf       	rjmp	.-8      	; 0xaae <__vector_11+0x2ba>
				}
			}
			if (bmRequestType == 0x21) {
				if (bRequest == HID_SET_REPORT) {
					usb_wait_receive_out();
					keyboard_leds = UEDATX;
 ab6:	80 91 f1 00 	lds	r24, 0x00F1
 aba:	80 93 91 01 	sts	0x0191, r24
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 abe:	8b ef       	ldi	r24, 0xFB	; 251
 ac0:	80 93 e8 00 	sts	0x00E8, r24
 ac4:	0b c0       	rjmp	.+22     	; 0xadc <__vector_11+0x2e8>
					keyboard_leds = UEDATX;
					usb_ack_out();
					usb_send_in();
					return;
				}
				if (bRequest == HID_SET_IDLE) {
 ac6:	3a 30       	cpi	r19, 0x0A	; 10
 ac8:	29 f4       	brne	.+10     	; 0xad4 <__vector_11+0x2e0>
					keyboard_idle_config = (wValue >> 8);
 aca:	b0 93 87 01 	sts	0x0187, r27
					keyboard_idle_count = 0;
 ace:	10 92 93 01 	sts	0x0193, r1
 ad2:	04 c0       	rjmp	.+8      	; 0xadc <__vector_11+0x2e8>
					//usb_wait_in_ready();
					usb_send_in();
					return;
				}
				if (bRequest == HID_SET_PROTOCOL) {
 ad4:	3b 30       	cpi	r19, 0x0B	; 11
 ad6:	69 f5       	brne	.+90     	; 0xb32 <__stack+0x33>
					keyboard_protocol = wValue;
 ad8:	a0 93 88 01 	sts	0x0188, r26
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 adc:	8e ef       	ldi	r24, 0xFE	; 254
 ade:	80 93 e8 00 	sts	0x00E8, r24
 ae2:	2a c0       	rjmp	.+84     	; 0xb38 <__stack+0x39>
					usb_send_in();
					return;
				}
			}
		}
		if (wIndex == DEBUG_INTERFACE) {
 ae4:	61 30       	cpi	r22, 0x01	; 1
 ae6:	71 05       	cpc	r23, r1
 ae8:	21 f5       	brne	.+72     	; 0xb32 <__stack+0x33>
			if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
 aea:	31 30       	cpi	r19, 0x01	; 1
 aec:	11 f5       	brne	.+68     	; 0xb32 <__stack+0x33>
 aee:	41 3a       	cpi	r20, 0xA1	; 161
 af0:	01 f5       	brne	.+64     	; 0xb32 <__stack+0x33>
				len = wLength;
 af2:	4c 2f       	mov	r20, r28
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 af4:	5e ef       	ldi	r21, 0xFE	; 254
			if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
				len = wLength;
				do {
					// wait for host ready for IN packet
					do {
						i = UEINTX;
 af6:	80 91 e8 00 	lds	r24, 0x00E8
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 afa:	28 2f       	mov	r18, r24
 afc:	30 e0       	ldi	r19, 0x00	; 0
 afe:	c9 01       	movw	r24, r18
 b00:	85 70       	andi	r24, 0x05	; 5
 b02:	90 70       	andi	r25, 0x00	; 0
 b04:	89 2b       	or	r24, r25
 b06:	b9 f3       	breq	.-18     	; 0xaf6 <__vector_11+0x302>
					if (i & (1<<RXOUTI)) return;	// abort
 b08:	22 fd       	sbrc	r18, 2
 b0a:	16 c0       	rjmp	.+44     	; 0xb38 <__stack+0x39>
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 b0c:	94 2f       	mov	r25, r20
 b0e:	41 32       	cpi	r20, 0x21	; 33
 b10:	08 f0       	brcs	.+2      	; 0xb14 <__stack+0x15>
 b12:	90 e2       	ldi	r25, 0x20	; 32
 b14:	89 2f       	mov	r24, r25
 b16:	03 c0       	rjmp	.+6      	; 0xb1e <__stack+0x1f>
					for (i = n; i; i--) {
						UEDATX = 0;
 b18:	10 92 f1 00 	sts	0x00F1, r1
						i = UEINTX;
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
					if (i & (1<<RXOUTI)) return;	// abort
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
					for (i = n; i; i--) {
 b1c:	81 50       	subi	r24, 0x01	; 1
 b1e:	88 23       	and	r24, r24
 b20:	d9 f7       	brne	.-10     	; 0xb18 <__stack+0x19>
						UEDATX = 0;
					}
					len -= n;
 b22:	49 1b       	sub	r20, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 b24:	50 93 e8 00 	sts	0x00E8, r21
					for (i = n; i; i--) {
						UEDATX = 0;
					}
					len -= n;
					usb_send_in();
				} while (len || n == ENDPOINT0_SIZE);
 b28:	44 23       	and	r20, r20
 b2a:	29 f7       	brne	.-54     	; 0xaf6 <__vector_11+0x302>
 b2c:	90 32       	cpi	r25, 0x20	; 32
 b2e:	19 f3       	breq	.-58     	; 0xaf6 <__vector_11+0x302>
 b30:	03 c0       	rjmp	.+6      	; 0xb38 <__stack+0x39>
				return;
			}
		}
	}
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 b32:	81 e2       	ldi	r24, 0x21	; 33
 b34:	80 93 eb 00 	sts	0x00EB, r24
}
 b38:	ff 91       	pop	r31
 b3a:	ef 91       	pop	r30
 b3c:	df 91       	pop	r29
 b3e:	cf 91       	pop	r28
 b40:	bf 91       	pop	r27
 b42:	af 91       	pop	r26
 b44:	9f 91       	pop	r25
 b46:	8f 91       	pop	r24
 b48:	7f 91       	pop	r23
 b4a:	6f 91       	pop	r22
 b4c:	5f 91       	pop	r21
 b4e:	4f 91       	pop	r20
 b50:	3f 91       	pop	r19
 b52:	2f 91       	pop	r18
 b54:	0f 90       	pop	r0
 b56:	0f be       	out	0x3f, r0	; 63
 b58:	0f 90       	pop	r0
 b5a:	1f 90       	pop	r1
 b5c:	18 95       	reti

00000b5e <phex1>:
		usb_debug_putchar(c);
	}
}

void phex1(unsigned char c)
{
 b5e:	98 2f       	mov	r25, r24
	usb_debug_putchar(c + ((c < 10) ? '0' : 'A' - 10));
 b60:	8a 30       	cpi	r24, 0x0A	; 10
 b62:	10 f0       	brcs	.+4      	; 0xb68 <phex1+0xa>
 b64:	87 e3       	ldi	r24, 0x37	; 55
 b66:	01 c0       	rjmp	.+2      	; 0xb6a <phex1+0xc>
 b68:	80 e3       	ldi	r24, 0x30	; 48
 b6a:	89 0f       	add	r24, r25
}
 b6c:	7b cd       	rjmp	.-1290   	; 0x664 <usb_debug_putchar>

00000b6e <phex>:

void phex(unsigned char c)
{
 b6e:	1f 93       	push	r17
 b70:	18 2f       	mov	r17, r24
	phex1(c >> 4);
 b72:	82 95       	swap	r24
 b74:	8f 70       	andi	r24, 0x0F	; 15
 b76:	f3 df       	rcall	.-26     	; 0xb5e <phex1>
	phex1(c & 15);
 b78:	81 2f       	mov	r24, r17
 b7a:	8f 70       	andi	r24, 0x0F	; 15
 b7c:	f0 df       	rcall	.-32     	; 0xb5e <phex1>
}
 b7e:	1f 91       	pop	r17
 b80:	08 95       	ret

00000b82 <print_P>:
#include <avr/pgmspace.h>

#include "print.h"

void print_P(const char *s)
{
 b82:	1f 93       	push	r17
 b84:	cf 93       	push	r28
 b86:	df 93       	push	r29
 b88:	ec 01       	movw	r28, r24
 b8a:	fe 01       	movw	r30, r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
 b8c:	21 96       	adiw	r28, 0x01	; 1
 b8e:	14 91       	lpm	r17, Z+
		if (!c) break;
 b90:	11 23       	and	r17, r17
 b92:	39 f0       	breq	.+14     	; 0xba2 <print_P+0x20>
		if (c == '\n') usb_debug_putchar('\r');
 b94:	1a 30       	cpi	r17, 0x0A	; 10
 b96:	11 f4       	brne	.+4      	; 0xb9c <print_P+0x1a>
 b98:	8d e0       	ldi	r24, 0x0D	; 13
 b9a:	64 dd       	rcall	.-1336   	; 0x664 <usb_debug_putchar>
		usb_debug_putchar(c);
 b9c:	81 2f       	mov	r24, r17
 b9e:	62 dd       	rcall	.-1340   	; 0x664 <usb_debug_putchar>
 ba0:	f4 cf       	rjmp	.-24     	; 0xb8a <print_P+0x8>
	}
}
 ba2:	df 91       	pop	r29
 ba4:	cf 91       	pop	r28
 ba6:	1f 91       	pop	r17
 ba8:	08 95       	ret

00000baa <_exit>:
 baa:	f8 94       	cli

00000bac <__stop_program>:
 bac:	ff cf       	rjmp	.-2      	; 0xbac <__stop_program>
